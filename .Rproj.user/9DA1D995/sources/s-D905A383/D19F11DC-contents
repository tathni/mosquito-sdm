# This script runs the SDM for each of the 7 species of interest

# Setup
library(raster)
library(rJava)
library(maxnet)
library(plyr)
library(dplyr)
library(tidyr)
library(stringr)
library(magrittr)
library(dismo)
library(rgdal)
library(sf)
library(maptools)
library(beepr)
data(wrld_simpl)
setwd("E:/SynologyDrive/Tejas_Server/! Research/! Mordecai Lab/! Mosquito SDM MaxEnt Mechanistic/")
tic <- Sys.time()
seedNum <- 250


# Read in cleaned mosquito species occurrence data and country codes list
Mosquitoes_SpeciesOfInterest <- read.csv("Occurrence Datasets Cleaned/Mosquitoes_SpeciesOfInterest_Cleaned.csv", header = TRUE,
                                         encoding = "UTF-8", stringsAsFactors = FALSE)

countryCodes <- read.csv("Country Codes/country-and-continent-codes.csv", sep = ",", header = TRUE,
                         encoding = "UTF-8", stringsAsFactors = FALSE)


# Assign continent names to both cleaned datasets
Mosquitoes_SpeciesOfInterest <- Mosquitoes_SpeciesOfInterest %>% 
  mutate(continent = countryCodes$Continent_Name[match(Mosquitoes_SpeciesOfInterest$countryCode, countryCodes$Two_Letter_Country_Code)])


# Create exclusion list with names of species of interest and continents
continents_list <- list(c("North America","South America","Africa","Asia","Oceania"),
                        c("North America","South America","Europe","Africa","Asia"),
                        c("Africa"),
                        c("Asia"),
                        c("Oceania"),
                        c("North America","Europe","Africa"),
                        c("North America","South America","Oceania","Asia"),
                        c("North America"))

SpeciesOfInterest_Names <- c("Aedes aegypti",
                             "Aedes albopictus",
                             "Anopheles gambiae",
                             "Anopheles stephensi",
                             "Culex annulirostris",
                             "Culex pipiens",
                             "Culex quinquefasciatus",
                             "Culex tarsalis")


# Read in and name the environmental predictors
predictorsPreStack <- alply(list.files("All Temperature Merged Rasters",
                               pattern = ".tif",
                               full.names = TRUE), 1, function(file){
  print(file)
  rast <- raster(file)
  return(rast)
})

rasterNames <- c("ATM","ATR","ATSD","TAM","TCM-DA","TCM","TCQ","THM-DA","THM","THQ")
predictorsPreStack <- setNames(predictorsPreStack, rasterNames)
predictors <- predictorsPreStack %>% stack()
# predictorSum <- sum(predictors)
# predictorSum[predictorSum > 0] <- 1 # If there is environmental data at the cell, set value to 1
# predictorSum[predictorSum < 0] <- 1
# predictorSum[predictorSum == 0] <- NA


# # Create background sampling maps based on species of interest's continent
# SouthAmerica_list <- c("Colombia", "Venezuela", "Suriname", "Guyana", "French Guiana",
#                        "Ecuador", "Peru", "Bolivia", "Chile", "Argentina", "Uruguay",
#                        "Paraguay", "Brazil", "Falkland Islands (Malvinas)")
# NorthAmerica <- wrld_simpl[wrld_simpl$REGION==19,]
# 
# SouthAmerica <- wrld_simpl[wrld_simpl$NAME %in% SouthAmerica_list, ]
# NorthAmerica <- NorthAmerica[!NorthAmerica$NAME %in% SouthAmerica_list, ]
# Africa <- wrld_simpl[wrld_simpl$REGION==2,]
# Oceania <- wrld_simpl[wrld_simpl$REGION==9,]
# Europe <- wrld_simpl[wrld_simpl$REGION==150,]
# Asia <- wrld_simpl[wrld_simpl$REGION==142,]
# 
# AedesAegypti_map <- rbind(NorthAmerica, SouthAmerica, Africa, Asia, Oceania)
# AedesAlbopictus_map <- rbind(NorthAmerica, SouthAmerica, Europe, Africa, Asia)
# AnophelesGambiae_map <- Africa
# AnophelesStephensi_map <- Asia
# CulexAnnulirostris_map <- Oceania
# CulexPipiens_map <- rbind(NorthAmerica, Europe, Africa)
# CulexQuinquefasciatus_map <- rbind(NorthAmerica, SouthAmerica, Oceania, Asia)
# CulexTarsalis_map <- NorthAmerica
# 
# 
# # Create a cropped predictorSum raster for each species of interest based on continent of occurrence
# map_1 <- raster::mask(predictorSum, AedesAegypti_map)
# map_1 <- raster::setExtent(predictorSum, AedesAegypti_map)
# 
# map_2 <- raster::mask(predictorSum, AedesAlbopictus_map)
# map_2 <- raster::setExtent(predictorSum, AedesAlbopictus_map)
# 
# map_3 <- raster::mask(predictorSum, AnophelesGambiae_map)
# map_3 <- raster::setExtent(predictorSum, AnophelesGambiae_map)
# 
# map_4 <- raster::mask(predictorSum, AnophelesStephensi_map)
# map_4 <- raster::setExtent(predictorSum, AnophelesStephensi_map)
# 
# map_5 <- raster::mask(predictorSum, CulexAnnulirostris_map)
# map_5 <- raster::setExtent(predictorSum, CulexAnnulirostris_map)
# 
# map_6 <- raster::mask(predictorSum, CulexPipiens_map)
# map_6 <- raster::setExtent(predictorSum, CulexPipiens_map)
# 
# map_7 <- raster::mask(predictorSum, CulexQuinquefasciatus_map)
# map_7 <- raster::setExtent(predictorSum, CulexQuinquefasciatus_map)
# 
# map_8 <- raster::mask(predictorSum, CulexTarsalis_map)
# map_8 <- raster::setExtent(predictorSum, CulexTarsalis_map)
# 
# 
# # Save cropped rasters for future use
# writeRaster(map_1, filename = "AeAegypti_SamplingMap.tif", format = "GTiff")
# writeRaster(map_2, filename = "AeAlbopictus_SamplingMap.tif", format = "GTiff")
# writeRaster(map_3, filename = "AnGambiae_SamplingMap.tif", format = "GTiff")
# writeRaster(map_4, filename = "AnStephensi_SamplingMap.tif", format = "GTiff")
# writeRaster(map_5, filename = "CxAnnulirostris_SamplingMap.tif", format = "GTiff")
# writeRaster(map_6, filename = "CxPipiens_SamplingMap.tif", format = "GTiff")
# writeRaster(map_7, filename = "CxQuinquefasciatus_SamplingMap.tif", format = "GTiff")
# writeRaster(map_8, filename = "CxTarsalis_SamplingMap.tif", format = "GTiff")


# Read in the cropped raster sampling maps
sampling_maps <- alply(list.files("Sampling Maps",
                                   pattern = ".tif",
                                   full.names = TRUE), 1, function(file){
                                     print(file)
                                     rast <- raster(file)
                                     return(rast)
                                   })


# Compile necessary lists needed in the SDM for loop
speciesList <- c("AedesAegypti",
                  "AedesAlbopictus",
                  "AnophelesGambiae",
                  "AnophelesStephensi",
                  "CulexAnnulirostris",
                  "CulexPipiens",
                  "CulexQuinquefasciatus",
                  "CulexTarsalis")

trainingList <- c("AedesAegypti_Training",
                  "AedesAlbopictus_Training",
                  "AnophelesGambiae_Training",
                  "AnophelesStephensi_Training",
                  "CulexAnnulirostris_Training",
                  "CulexPipiens_Training",
                  "CulexQuinquefasciatus_Training",
                  "CulexTarsalis_Training")

evaluationList <- c("AedesAegypti_Evaluation",
                     "AedesAlbopictus_Evaluation",
                     "AnophelesGambiae_Evaluation",
                     "AnophelesStephensi_Evaluation",
                     "CulexAnnulirostris_Evaluation",
                     "CulexPipiens_Evaluation",
                     "CulexQuinquefasciatus_Evaluation",
                     "CulexTarsalis_Evaluation")


# Run the SDM
# Loop that runs the SDM for each species of interest
for (i in 1:length(SpeciesOfInterest_Names)) { 
  print(paste0("Species of interest is ", SpeciesOfInterest_Names[i]))
  
  
  # Assign 80% from each species of interest without replacement as training data
  # Set aside 20% for evaluation
  species_df <- assign(speciesList[i], filter(Mosquitoes_SpeciesOfInterest, species == SpeciesOfInterest_Names[i]))
  occGPS_raw <- dplyr::select(species_df, c(species, decimalLongitude, decimalLatitude)) %>% 
    unique
  q <- round(nrow(occGPS_raw) * 0.8)
  set.seed(seedNum)
  occGPS_train <- assign(trainingList[i], occGPS_raw[sample(nrow(occGPS_raw), q), ])
  occGPS_eval <- assign(evaluationList[i], setdiff(occGPS_raw, occGPS_train))
  
  
  # Save the training and evaluation data as .csv files
  csvName_Training <- paste0(SpeciesOfInterest_Names[i]," Training Data.csv")
  csvName_Evaluation <- paste0(SpeciesOfInterest_Names[i]," Evaluation Data.csv")
  write.csv(occGPS_train, file = csvName_Training, row.names = FALSE)
  write.csv(occGPS_eval, file = csvName_Evaluation, row.names = FALSE)
  
  
  # Isolate long/lat coordinates of occurrence points
  occGPS_train %<>% dplyr::select(decimalLongitude, decimalLatitude)
  occGPS_eval %<>% dplyr::select(decimalLongitude, decimalLatitude)
  
  
  # Identify raster cells in which training and eval points fall, back-acquire the coordinates of unique, non-NA cells
  print(paste0("Isolating training and evaluation cells for ", SpeciesOfInterest_Names[i]))
  occGPS_train_noNA <- occGPS_train[-c(which(is.na(raster::extract(predictors, occGPS_train)))),] 
  cells_train <- xyFromCell(predictors, cellFromXY(predictors, occGPS_train_noNA) %>% 
                              unique) %>% as.data.frame()
  colnames(cells_train) <- c("decimalLongitude","decimalLatitude")
  occGPS_eval_noNA <- occGPS_eval[-c(which(is.na(raster::extract(predictors, occGPS_eval)))),] 
  cells_eval <- xyFromCell(predictors, cellFromXY(predictors, occGPS_eval_noNA) %>% 
                             unique) %>% as.data.frame()
  colnames(cells_eval) <- c("decimalLongitude","decimalLatitude")
  
  
  # Random sample 10,000 background points from the continent(s) on which the species of interest resides
  print(paste0("Sampling background cells for ", SpeciesOfInterest_Names[i]))
  sampleReg <- 100000 # Over-sample to account for the NA's
  sampleOver <- 800000 # Higher amount of sampling for the geographically-small Cx. annulirostris and An. stephensi
  selectReg <- 10000
  selectFew <- 2500 # Fewer bg points for species with fewer occurrences
  sample10k <- 10000
  # selectVeryFew <- 4000
  
  if(SpeciesOfInterest_Names[i] == "Culex annulirostris" |
     SpeciesOfInterest_Names[i] == "Anopheles stephensi") {
    set.seed(seedNum)
    bg <- randomPoints(sampling_maps[[i]], sampleOver, p = cells_train, excludep = T, prob = F)
  }
  else {
    set.seed(seedNum)
    bg <- randomPoints(sampling_maps[[i]], sample10k, p = cells_train, excludep = T, prob = F)
  }
  
  if(SpeciesOfInterest_Names[i] == "Anopheles gambiae" |
     SpeciesOfInterest_Names[i] == "Culex annulirostris") {
    set.seed(seedNum)
    bg <- bg[sample(nrow(bg), selectFew), ] # Use 2.5k bg points to facilitate model fit for low occurrence-points species
  }
  # if(SpeciesOfInterest_Names[i] == "Culex tarsalis") {
  #   set.seed(seedNum)
  #   bg <- bg[sample(nrow(bg), selectVeryFew), ] # Use 7.5k bg points to facilitate model fit for low occurrence-points species
  # }
  else {
    set.seed(seedNum)
    bg <- bg[sample(nrow(bg), sample10k), ] # Use 10k bg points as standard for all species
  }
  
  
  
  # Extract covariates for background and train/eval points
  print(paste0("Extracting covariate info from background and train/eval points for ", SpeciesOfInterest_Names[i]))
  predictors_train_df <- rbind(data.frame(raster::extract(predictors, cells_train)),
                               data.frame(raster::extract(predictors, bg)))
  predictors_eval_df <- rbind(data.frame(raster::extract(predictors, cells_eval)),
                              data.frame(raster::extract(predictors, bg)))
  
  
  # Bind occurrences and background, allocate 1 to occ and 0 to bg, drop NA's
  print(paste0("Training points: ", nrow(cells_train), "; Background points: ", nrow(bg)))
  sdmData <- cbind(c(rep(1, nrow(cells_train)), 
                     rep(0, nrow(bg))), predictors_train_df)
  sdmData <- sdmData[complete.cases(sdmData), ]
  
  ## TEMPORARY EXTRACTION FIGURE OF COVARIATE CORRELATION
  colnames(sdmData) <- c("OccBg", "ATM", "ATR", "ATSD", "TAM", "TCM-DA", "TCM", "TCQ", "THM-DA", "THM", "THQ")
  
  par(mfrow = c(3,3))
  TAM_ATSD_occ <- sdmData %>% select(OccBg, TAM, ATSD) %>% filter (OccBg == 1) %>% select(-OccBg)
  TAM_ATSD_bg <- sdmData %>% select(OccBg, TAM, ATSD) %>% filter (OccBg == 0) %>% select(-OccBg)
  plot(TAM_ATSD_occ, col = "red")
  points(TAM_ATSD_bg, col = "black")
  
  TAM_ATR_occ <- sdmData %>% select(OccBg, TAM, ATR) %>% filter (OccBg == 1) %>% select(-OccBg)
  TAM_ATR_bg <- sdmData %>% select(OccBg, TAM, ATR) %>% filter (OccBg == 0) %>% select(-OccBg)
  plot(TAM_ATR_occ, col = "red")
  points(TAM_ATR_bg, col = "black")
  
  TCQ_ATR_occ <- sdmData %>% select(OccBg, TCQ, ATR) %>% filter (OccBg == 1) %>% select(-OccBg)
  TCQ_ATR_bg <- sdmData %>% select(OccBg, TCQ, ATR) %>% filter (OccBg == 0) %>% select(-OccBg)
  plot(TCQ_ATR_occ, col = "red")
  points(TCQ_ATR_bg, col = "black")
  
  TCQ_ATSD_occ <- sdmData %>% select(OccBg, TCQ, ATSD) %>% filter (OccBg == 1) %>% select(-OccBg)
  TCQ_ATSD_bg <- sdmData %>% select(OccBg, TCQ, ATSD) %>% filter (OccBg == 0) %>% select(-OccBg)
  plot(TCQ_ATSD_occ, col = "red")
  points(TCQ_ATSD_bg, col = "black")
  
  THQ_ATR_occ <- sdmData %>% select(OccBg, THQ, ATR) %>% filter (OccBg == 1) %>% select(-OccBg)
  THQ_ATR_bg <- sdmData %>% select(OccBg, THQ, ATR) %>% filter (OccBg == 0) %>% select(-OccBg)
  plot(THQ_ATR_occ, col = "red")
  points(THQ_ATR_bg, col = "black")
  
  THQ_ATSD_occ <- sdmData %>% select(OccBg, THQ, ATSD) %>% filter (OccBg == 1) %>% select(-OccBg)
  THQ_ATSD_bg <- sdmData %>% select(OccBg, THQ, ATSD) %>% filter (OccBg == 0) %>% select(-OccBg)
  plot(THQ_ATSD_occ, col = "red")
  points(THQ_ATSD_bg, col = "black")
  
  TAM_TCQ_occ <- sdmData %>% select(OccBg, TAM, TCQ) %>% filter (OccBg == 1) %>% select(-OccBg)
  TAM_TCQ_bg <- sdmData %>% select(OccBg, TAM, TCQ) %>% filter (OccBg == 0) %>% select(-OccBg)
  plot(TAM_TCQ_occ, col = "red")
  points(TAM_TCQ_bg, col = "black")
  
  TAM_THQ_occ <- sdmData %>% select(OccBg, TAM, THQ) %>% filter (OccBg == 1) %>% select(-OccBg)
  TAM_THQ_bg <- sdmData %>% select(OccBg, TAM, THQ) %>% filter (OccBg == 0) %>% select(-OccBg)
  plot(TAM_THQ_occ, col = "red")
  points(TAM_THQ_bg, col = "black")
  
  TCQ_THQ_occ <- sdmData %>% select(OccBg, TCQ, THQ) %>% filter (OccBg == 1) %>% select(-OccBg)
  TCQ_THQ_bg <- sdmData %>% select(OccBg, TCQ, THQ) %>% filter (OccBg == 0) %>% select(-OccBg)
  plot(TCQ_THQ_occ, col = "red")
  points(TCQ_THQ_bg, col = "black")
  
  
  par(oma=c(0,0,2,0))
  title("Temperature Variables: Combinations of Central Tendency and Variation", outer=TRUE)
  
  
  # Save the SDM data for the current species of interest
  sdmDataSave <- paste0(SpeciesOfInterest_Names[i]," SDM Data.csv")
  write.csv(sdmData, file = sdmDataSave, row.names = FALSE)
  
  
  # Fit a MaxNet model, calibrating for regularization parameters and feature classes
  print(paste0("Fitting the MaxNet model for ", SpeciesOfInterest_Names[i]))
  source("R Scripts/SDM_Functions.R")
  maxnet_fit <- trainMaxNet(data = sdmData,
                            classes = "lqhpt",
                            verbose = TRUE,
                            out = c("model", "tuning"))
  
  
  # Predict MaxEnt distributions
  print(paste0("Saving the MaxNet prediction for ", SpeciesOfInterest_Names[i]))
  maxnet_predict <- raster::predict(object = predictors, 
                                    model = maxnet_fit$model, type = "cloglog")
  par(mfrow = c(1,1))
  plot(maxnet_predict)
  vectorSave <- paste0(SpeciesOfInterest_Names[i]," Distribution.tif")
  writeRaster(maxnet_predict, filename = vectorSave, 
              format = "GTiff", overwrite = T)
  dev.off()
  
  
  # Print time elapsed for each species' model run
  toc <- Sys.time()
  timedSpecies <- toc - tic
  print(paste0("The time elapsed for  ", SpeciesOfInterest_Names[i], " is ", timedSpecies, " hours"))
  
  
  # Composite a list of all items to save per species' model run
  data_toSave <- list(species_df,
                      bg,
                      occGPS_raw,
                      occGPS_train,
                      occGPS_eval,
                      occGPS_train_noNA,
                      occGPS_eval_noNA,
                      cells_train,
                      cells_eval,
                      predictors_train_df,
                      predictors_eval_df,
                      sdmData,
                      maxnet_fit,
                      maxnet_predict)
  
  saveSDM_name <- paste0(speciesList[i],"_MaxEnt")
  saveSDM <- assign(saveSDM_name, data_toSave)
  
}


# Save data for all species' model fits
CulexAnnulirostris_MaxEnt <- 1 # Saving a null variable as a placeholder

sdmList <- list(AedesAegypti_MaxEnt,
                AedesAlbopictus_MaxEnt,
                AnophelesGambiae_MaxEnt,
                AnophelesStephensi_MaxEnt,
                CulexAnnulirostris_MaxEnt,
                CulexPipiens_MaxEnt,
                CulexQuinquefasciatus_MaxEnt,
                CulexTarsalis_MaxEnt)
saveRDS(sdmList, "All Species MaxEnt Data.rds")


# Print elapsed time for cumulative model runs
toc <- Sys.time()
toc - tic
beep(3)



