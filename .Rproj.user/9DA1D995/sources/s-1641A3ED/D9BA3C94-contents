# This script performs the compilation of figures and plots for the SDM
# Ancillary to the main SDM script

### ~~ SETUP ~~ ###
library(raster)
library(rJava)
library(maxnet)
library(plyr)
library(dplyr)
library(tidyr)
library(stringr)
library(magrittr)
library(dismo)
library(rgdal)
library(sf)
library(spThin)
library(corrplot)
library(pROC)
library(pdp)
library(maptools)
library(plotROC)
data(wrld_simpl)
setwd("E:/SynologyDrive/Tejas_Server/! Research/! Mordecai Lab/! Mosquito SDM MaxEnt Mechanistic/")
tic <- Sys.time()
seedNum <- 250

# Read in cleaned mosquito species occurrence data and country codes list
Mosquitoes_AllBackground <- read.csv("GBIF Datasets Cleaned/Mosquitoes_All_Cleaned.csv", header = TRUE,
                                     encoding = "UTF-8", stringsAsFactors = FALSE)

Mosquitoes_SpeciesOfInterest <- read.csv("GBIF Datasets Cleaned/Mosquitoes_SpeciesOfInterest_Cleaned.csv", header = TRUE,
                                         encoding = "UTF-8", stringsAsFactors = FALSE)

countryCodes <- read.csv("Country Codes/country-and-continent-codes.csv", sep = ",", header = TRUE,
                         encoding = "UTF-8", stringsAsFactors = FALSE)

# Assign continent names to both cleaned datasets
Mosquitoes_AllBackground <- Mosquitoes_AllBackground %>% 
  mutate(continent = countryCodes$Continent_Name[match(Mosquitoes_AllBackground$countryCode, countryCodes$Two_Letter_Country_Code)])

Mosquitoes_SpeciesOfInterest <- Mosquitoes_SpeciesOfInterest %>% 
  mutate(continent = countryCodes$Continent_Name[match(Mosquitoes_SpeciesOfInterest$countryCode, countryCodes$Two_Letter_Country_Code)])

# List of species of interest names
SpeciesOfInterest_Names <- c("Aedes aegypti",
                             "Aedes albopictus")

# Read in and name the environmental predictors
predictorsPreStack <- alply(list.files("Environmental Predictors Merged",
                                       pattern = ".tif",
                                       full.names = TRUE), 1, function(file){
                                         print(file)
                                         rast <- raster(file)
                                         return(rast)
                                       })

rasterNames <- c("ELEV","EVIM","EVISD","FC","HPD","PDQ","PWQ","TCM","THM")
predictorsPreStack <- setNames(predictorsPreStack, rasterNames)
predictors <- predictorsPreStack %>% stack()
  

data <- readRDS("MaxEnt Data - Random Background/Aedes MaxEnt Data.rds")





#### ~~ GENERAL FIGURES ~~ ####


### ENVIRONMENTAL COVARIATES PLOT ###
pdf("Environmental Covariates.pdf")
plot(predictors, legend.mar = c(8,8))
dev.off()



### PAIRS CORRELATION ANALYSIS ###
set.seed(seedNum)
pairs_possibleBg <- Mosquitoes_AllBackground %>%
  select(decimalLongitude, decimalLatitude) %>%
  unique
set.seed(seedNum)
pairs_possibleBg <- pairs_possibleBg[sample(nrow(pairs_possibleBg), 15000), ] # Over-sample to account for NA's
pairs_bg <- raster::extract(predictors, pairs_possibleBg)
pairs_bg <- pairs_bg[complete.cases(pairs_bg), ]
g = 10000
set.seed(seedNum)
pairs_sample <- pairs_bg[sample(nrow(pairs_bg), g), ] # Select 10k bg points for pairs sampling

pdf("Pairs Correlation Covariates Simplified.pdf")
corrplot(cor(pairs_sample),
         method = "color",
         addCoef.col = "black",
         tl.col = "black", tl.srt = 45,
         type = "upper")
dev.off()



### SPECIES OCCURRENCES MAP ###
# Partition data by individual species of interest for species occurrence plotting
AedesAegypti <- filter(Mosquitoes_SpeciesOfInterest, species == "Aedes aegypti")
AedesAegypti_Points <- AedesAegypti %>% select(decimalLongitude, decimalLatitude) %>% unique
AedesAlbopictus <- filter(Mosquitoes_SpeciesOfInterest, species == "Aedes albopictus")
AedesAlbopictus_Points <- AedesAlbopictus %>% select(decimalLongitude, decimalLatitude) %>% unique


# Plotting species occurrences
pdf("Species Occurrence Map.pdf")
worldMap <- wrld_simpl[wrld_simpl@data$UN!="10",]
plot(worldMap, ylim=c(-80, 65), xlim = c(-180, 180), mar = c(0,0,0,0),
     bg = "lightblue3", border = NA, col = "antiquewhite")

points(AedesAegypti_Points, cex=0.05, col="blue")
points(AedesAlbopictus_Points, cex=0.05, col="firebrick1")


legend(100, -80, c("Aedes aegypti","Aedes albopictus"),
       cex = 0.6, col=c("blue","firebrick1"),
       pch = c(19,19,19,19,19,19,19),
       bg = "white")
dev.off()




### VECTOR DISTRIBUTION PLOTS ###
# Read in, plot, and save all of the MaxEnt vector distributions
modelProjections <- alply(list.files("MaxEnt Data - Random Background/Vector Distribution TIFs",
                                     pattern = ".tif",
                                     full.names = TRUE), 1, function(file){
                                       print(file)
                                       rast <- raster(file)
                                       return(rast)
                                     })
modelProjections <- setNames(modelProjections, SpeciesOfInterest_Names)

for(i in 1:length(modelProjections)) {
  distPlotSave <- paste0(SpeciesOfInterest_Names[i]," Distribution.pdf")
  pdf(distPlotSave)
  plot(modelProjections[[i]])
  dev.off()
}

modelProjStack <- stack(modelProjections)
pdf("All Vectors Distribution.pdf")
plot(modelProjStack)
dev.off()






#### ~~ SPECIES PARTICULAR FIGURES ~~ ####

# Main loop to compile figures that are specific for each species
for(i in 1:length(SpeciesOfInterest_Names)) {
  
  # Load necessary data
    species_df <- data[[i]][[1]]
    bg <- data[[i]][[2]]
    occGPS_raw <- data[[i]][[3]]
    occGPS_train <- data[[i]][[4]]
    occGPS_eval <- data[[i]][[5]]
    occGPS_train_noNA <- data[[i]][[6]]
    occGPS_eval_noNA <- data[[i]][[7]]
    cells_train <- data[[i]][[8]]
    cells_eval <- data[[i]][[9]]
    predictors_train_df <- data[[i]][[10]]
    predictors_eval_df <- data[[i]][[11]]
    sdmData <- data[[i]][[12]]
    maxnet_fit <- data[[i]][[13]]
    maxnet_predict <- data[[i]][[14]]
    
    
  
  ### COVARIATE RESPONSES ###
  # Set up a dictionary to go from var.name to clean name for plotting
  var.names.plotting = data.frame(
    var.names = c("ELEV","EVIM","EVISD","FC","HPD","PDQ","PWQ","TCM","THM"),
    plotting.names = c("ELEV","EVIM","EVISD","FC %","HPD","PDQ","PWQ","TCM","THM"),
    stringsAsFactors = FALSE)

  # j tracks the jth most important variable that we are looking at
  responseSave <- paste0(SpeciesOfInterest_Names[i]," Covariate Responses.pdf")
  pdf(file = responseSave, width = 8, height = 10)
  par(mfrow = c(4,3))
  par(mar=c(5, 6, 1.5, 2.5) + 0.1)
  par(oma = c(1, 2, 2, 4))
  par(cex.axis = 1.2, cex.lab = 1.2)
  for (j in 1:length(predictorsPreStack)){
    if( j %% par('mfrow')[2] == 1){left_ax = TRUE
    } else{left_ax = FALSE}
    if(j %% par('mfrow')[2] == 0){right_ax = TRUE
    } else{right_ax = FALSE}
    var.name = var.names.plotting[j,1]
    print(var.name)

    # Identify which of the predictor names it was
    var.data = predictors_train_df[[var.name]]
    test_resp <- pdp::partial(maxnet_fit$model, pred.var = var.name,
                              quantiles = TRUE, probs = c(1:99/100),
                              plot = FALSE,
                              train = sdmData)
    if(is.factor(var.data)) {
      test_sums = table(var.data)
      test_hist <- graphics::barplot(test_sums, col = "grey", border = "white",
                                     las = 1, ylab = "",
                                     xlab = "")
      title(xlab = paste0(letters[j], ". ",
                          mapvalues(var.name,
                                    from = var.names.plotting$var.names,
                                    to = var.names.plotting$plotting.names,
                                    warn_missing = FALSE)),
            line = 4)
      title(ylab = ifelse(left_ax, "Density", ""),
            line = 4)
      par(new = TRUE)
      plot(test_hist,
           test_resp$yhat,
           xlab = "", ylab = "", axes = FALSE, bty = "n",
           type = "l")
      axis(side=4, at = pretty(range(test_resp$yhat)), las = 1)
      mtext(ifelse(right_ax, "Marginal Effect", ""), side=4, line=4, cex = 0.75)
      box()
    } else {
      resp_x = test_resp[,1]
      test_hist <- graphics::hist(var.data,
                                  plot = F)
      plot(test_hist, freq = F, col = "grey", border = "white",
           las = 1,
           ylab = "", xlab = "",
           main = NULL)
      title(ylab = ifelse(left_ax, "Density", ""),
            line = 5)
      title(xlab = paste0(letters[j], ". ",
                          mapvalues(var.name,
                                    from = var.names.plotting$var.names,
                                    to = var.names.plotting$plotting.names,
                                    warn_missing = FALSE)),
            line = 3)
      par(new = TRUE)
      plot(resp_x,
           test_resp$yhat,
           xlab = "", ylab = "", axes = FALSE, bty = "n",
           type = "l")
      axis(side=4, at = pretty(range(test_resp$yhat)), las = 1)
      mtext(ifelse(right_ax, "Marginal Effect", ""), side=4, line=4, cex = 0.75)
      box()
    }
  }
  dev.off()





  ### PREDICTION PLOTS ###
  # Plot training occurrence points onto distribution
  print(paste0("Plotting training points for ", SpeciesOfInterest_Names[i]))
  compareSave_training <- paste0(SpeciesOfInterest_Names[i]," Training Prediction.pdf")
  pdf(file = compareSave_training)
  par(mfrow = c(1,1))
  plot(maxnet_predict, axes = F, box = F, legend = T)
  points(occGPS_train, pch = 16, cex = 0.25, col = "black")
  dev.off()

  # Plot evaluation occurrence points onto distribution
  print(paste0("Plotting evaluation prediction for ", SpeciesOfInterest_Names[i]))
  compareSave_evaluation <- paste0(SpeciesOfInterest_Names[i]," Evaluation Prediction.pdf")
  pdf(file = compareSave_evaluation)
  par(mfrow = c(1,1))
  plot(maxnet_predict, axes = F, box = F, legend = T)
  points(occGPS_eval, pch = 16, cex = 0.35, col = "black")
  dev.off()





  ### ROC AUC CURVES ###
  # Calculate ROC and AUC for training and evaluation data
  print(paste0("Calculating the training AUC for ", SpeciesOfInterest_Names[i]))
  roc_auc_save <- paste0(SpeciesOfInterest_Names[i]," AUC.pdf")
  pdf(roc_auc_save)
  plot.roc(c(rep(1, nrow(cells_train)), rep(0, nrow(bg))), # Training data
           as.vector(predict(maxnet_fit$model, predictors_train_df)),
           print.auc = TRUE,
           print.auc.y = 0.4,
           identity.col = "grey50",
           col = "firebrick1",
           legacy.axes = TRUE,
           grid = TRUE)
  plot.roc(c(rep(1, nrow(cells_eval)), rep(0, nrow(bg))), # Evaluation data
           as.vector(predict(maxnet_fit$model, predictors_eval_df)),
           add = TRUE,
           print.auc = TRUE,
           print.auc.y = 0.35,
           col = "#1c61b6")
  legend("bottomright", legend=c("Training", "Evaluation"),
         col=c("firebrick1", "#1c61b6"), lwd=2)
  dev.off()
  
  
  
  

  ### DENSITY PLOTS ###
  # Load necessary data
  densityPlot_df <- sdmData %>%
  mutate(HPD_log = log(HPD)) %>% 
  select(-HPD)
  colnames(densityPlot_df)[1] <- "occurrence"

  # For each variable, plot the density curves for occurrences and background points
  print(paste0("Creating density plots for ", SpeciesOfInterest_Names[i]))
  density_save <- paste0(SpeciesOfInterest_Names[i]," Density.pdf")
  pdf(density_save)
  par(mfrow = c(3,3), # Set number of rows and columns
      mar = c(3, 3.5, 1, 1) + 1, # Margins of individual panels
      oma = c(3, 3, 3, 3)) # Outer margins
  a_ply(colnames(densityPlot_df)[-1], 1, function(p){
    occ_density <- densityPlot_df %>% 
      filter(occurrence == 1) %>% 
      pull(p) %>% 
      density
    bg_density <- densityPlot_df %>% 
      filter(occurrence == 0) %>% 
      pull(p) %>% 
      density
    
    # Set up plot
    plot(NULL, 
         las = 1,
         xlim = range(c(occ_density$x, bg_density$x)),
         ylim = range(c(occ_density$y, bg_density$y)),
         ylab = "", 
         xlab = "")
    
    # Add curves for occurrences and background
    points(occ_density$x, occ_density$y, type = "l", col = "#0d0df2")
    points(bg_density$x, occ_density$y, type = "l", col = "#1a1a1a99")
    mtext(p, side = 1, line = 2.5, cex = 0.75) # X axis label
  })
  mtext(SpeciesOfInterest_Names[i], outer = TRUE) # Add overall title
  dev.off()
  
  
}






