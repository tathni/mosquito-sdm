#------------------------------------------------------
na_count_yearRound <- na_count_list[yearRound_inds]
#------------------------------------------------------
# Sum the raster stacks and save files
#------------------------------------------------------
predictor_sum_yearRound_check <- sum(predictors_yearRound_check)
writeRaster(predictor_sum_yearRound_check, filename = "Environmental Predictors Sum Checks/Predictor_Sum_YearRound_Check.tif", format = "GTiff", overwrite=T)
#------------------------------------------------------
# Gather NA cell counts per raster layer by activity season
#------------------------------------------------------
na_count_yearRound <- na_count_list[yearRound_inds]
na_count_photoSeason <- na_count_list[photoSeason_inds]
na_count_precipSeason <- na_count_list[precipSeason_inds]
#------------------------------------------------------
# Create indices that acquire respective rasters for a given activity season
#------------------------------------------------------
yearRound_inds <- c(1:6,11:15)
photoSeason_inds <- c(1:6,11:12,15,7:8)
precipSeason_inds <- c(1:6,11:12,15,9:10)
#------------------------------------------------------
# Gather NA cell counts per raster layer by activity season
#------------------------------------------------------
na_count_yearRound <- na_count_list[yearRound_inds]
na_count_photoSeason <- na_count_list[photoSeason_inds]
na_count_precipSeason <- na_count_list[precipSeason_inds]
---------------------
# Count number of NA cells in the summed activity season rasters
#------------------------------------------------------
na_count_yearRound_sum <-  calc(predictor_sum_yearRound_check, fun=function(x){sum(x > 1)})
na_count_photoSeason_sum <- calc(predictor_sum_photoSeason_check, fun=function(x){sum(x > 1)})
na_count_precipSeason_sum <- calc(predictor_sum_precipSeason_check, fun=function(x){sum(x > 1)})
?cellStats
#------------------------------------------------------
# Plot individual 0/1 rasters and summed 0/1 rasters, and print number of NA cells, by activity season
#------------------------------------------------------
plot(predictors_yearRound_check)
plot(predictors_sum_yearRound_check)
plot(predictors_yearRound_check)
plot(predictor_sum_yearRound_check)
plot(predictors_photoSeason_check)
plot(predictor_sum_photoSeason_check)
#------------------------------------------------------
# Plot individual 0/1 rasters and summed 0/1 rasters, and print number of NA cells, by activity season
#------------------------------------------------------
png("Environmental Predictors Sum Checks/Year Round Individual Raster NA.png")
plot(predictors_yearRound_check)
dev.off()
png("Environmental Predictors Sum Checks/Year Round Summed NA.png")
plot(predictor_sum_yearRound_check)
dev.off()
#------------------------------------------------------
# Read in summed activity season rasters
#------------------------------------------------------
predictor_sum_yearRound_check <- raster("Environmental Predictors Sum Checks/Predictor_Sum_YearRound_Check.tif")
predictor_sum_photoSeason_check <- raster("Environmental Predictors Sum Checks/Predictor_Sum_PhotoSeason_Check.tif")
predictor_sum_precipSeason_check <- raster("Environmental Predictors Sum Checks/Predictor_Sum_PrecipSeason_Check.tif")
png("Environmental Predictors Sum Checks/Raster Plots/Photo Season Individual Raster NA.png")
plot(predictors_photoSeason_check)
png("Environmental Predictors Sum Checks/Raster Plots/Photo Season Summed NA.png")
plot(predictor_sum_photoSeason_check)
#------------------------------------------------------
# Compress predictors into a stacked raster for each activity season combination
#------------------------------------------------------
predictors_yearRound_check <- zero_one_rast_preStack[yearRound_inds] %>% stack()
predictors_photoSeason_check <- zero_one_rast_preStack[photoSeason_inds] %>% stack()
predictors_precipSeason_check <- zero_one_rast_preStack[precipSeason_inds] %>% stack()
png("Environmental Predictors Sum Checks/Raster Plots/Photo Season Individual Raster NA.png")
plot(predictors_photoSeason_check)
dev.off()
png("Environmental Predictors Sum Checks/Raster Plots/Photo Season Summed NA.png")
plot(predictor_sum_photoSeason_check)
dev.off()
png("Environmental Predictors Sum Checks/Raster Plots/Precip Season Individual Raster NA.png")
plot(predictors_precipSeason_check)
dev.off()
png("Environmental Predictors Sum Checks/Raster Plots/Precip Season Summed NA.png")
plot(predictor_sum_precipSeason_check)
dev.off()
predictor_sum_precipSeason_check <- sum(predictors_precipSeason_check)
plot(zero_one_rast_list)
plot(zero_one_rast_preStack)
View(na_count_list)
#------------------------------------------------------
# Initialize and process 0/1 rasters, where 0 = value, 1 = NA or missing value
#------------------------------------------------------
zero_one_rast_preStack <- list()
for(i in 1:length(predictors_preStack)) {
test <- predictors_preStack[[i]]
blank_rast <- setValues(test, rep(0, ncell(test))) # Make a blank raster filled with zeros with the same structure as the read-in raster
zero_one_rast <- mask(blank_rast, mask = test, # Everywhere the raster layer was masked, set it to 1 in the zero/blank raster
mask_value = test@file@nodatavalue,
updatevalue = 1)
zero_one_rast_preStack <- c(zero_one_rast_preStack, zero_one_rast)
}
#------------------------------------------------------
# Create indices that acquire respective rasters for a given activity season
#------------------------------------------------------
yearRound_inds <- c(1:6,11:15)
photoSeason_inds <- c(1:6,11:12,15,7:8)
precipSeason_inds <- c(1:6,11:12,15,9:10)
predictors_photoSeason_check <- binary_mask_preStack[photoSeason_inds] %>% stack()
predictors_precipSeason_check <- binary_mask_preStack[precipSeason_inds] %>% stack()
binary_mask_preStack <- zero_one_rast_preStack
predictors_photoSeason_check <- binary_mask_preStack[photoSeason_inds] %>% stack()
predictors_precipSeason_check <- binary_mask_preStack[precipSeason_inds] %>% stack()
plot(predictor_precipSeason_check)
#------------------------------------------------------
# Create indices that acquire respective rasters for a given activity season
#------------------------------------------------------
yearRound_inds <- c(1:6,11:15)
photoSeason_inds <- c(1:6,11:12,15,7:8)
precipSeason_inds <- c(1:6,11:12,15,9:10)
#------------------------------------------------------
# Compress predictors into a stacked raster for each activity season
#------------------------------------------------------
predictors_yearRound_check <- binary_mask_preStack[yearRound_inds] %>% stack()
predictors_photoSeason_check <- binary_mask_preStack[photoSeason_inds] %>% stack()
predictors_precipSeason_check <- binary_mask_preStack[precipSeason_inds] %>% stack()
# #------------------------------------------------------
predictor_sum_photoSeason_check <- sum(predictors_photoSeason_check)
predictor_sum_precipSeason_check <- sum(predictors_precipSeason_check)
plot(predictor_sum_photoSeason_check)
plot(predictors_yearRound_check)
plot(predictors_photoSeason_check)
dev.off()
dev.off()
dev.off()
dev.off()
plot(predictors_precipSeason_check)
plot(predictor_sum_precipSeason_check)
plot(predictor_sum_photoSeason_check)
raster::plot(predictor_sum_precipSeason_check)
?mask
#------------------------------------------------------
# Plot individual binary mask rasters and summed binary mask rasters, and print number of NA cells, by activity season
#------------------------------------------------------
png("Environmental Predictors Sum Checks/Raster Plots/Year Round Individual Raster NA.png")
raster::plot(predictors_yearRound_check, width = 500, height = 500, maxpixels=1e8)
dev.off()
#------------------------------------------------------
# Load in environmental predictors
#------------------------------------------------------
predictors_preStack <- alply(list.files("Environmental Predictors Merged",
pattern = ".tif",
full.names = TRUE), 1, function(file){
print(file)
rast <- raster(file)
return(rast)
})
rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","SW","TAM","TASD","WS")
predictors_preStack <- setNames(predictors_preStack, rasterNames)
#------------------------------------------------------
# Compress predictors into a stacked raster for each activity season
#------------------------------------------------------
predictors_yearRound_check <- binary_mask_preStack[yearRound_inds] %>% stack()
predictors_photoSeason_check <- binary_mask_preStack[photoSeason_inds] %>% stack()
predictors_precipSeason_check <- binary_mask_preStack[precipSeason_inds] %>% stack()
#------------------------------------------------------
# Plot individual binary mask rasters and summed binary mask rasters, and print number of NA cells, by activity season
#------------------------------------------------------
png("Environmental Predictors Sum Checks/Raster Plots/Year Round Individual Raster NA.png")
raster::plot(predictors_yearRound_check, width = 500, height = 500, maxpixels=1e8)
dev.off()
rm(list=ls())
source("E:/Documents/GitHub/mosquito-sdm/0-config.R")
#------------------------------------------------------
# Load in environmental predictors
#------------------------------------------------------
predictors_preStack <- alply(list.files("Environmental Predictors Merged",
pattern = ".tif",
full.names = TRUE), 1, function(file){
print(file)
rast <- raster(file)
return(rast)
})
rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","SW","TAM","TASD","WS")
predictors_preStack <- setNames(predictors_preStack, rasterNames)
#------------------------------------------------------
# Initialize and process binary-mask rasters, where 0 = value, 1 = NA or missing value
#------------------------------------------------------
binary_mask_preStack <- list()
for(i in 1:length(predictors_preStack)) {
test <- predictors_preStack[[i]]
blank_rast <- setValues(test, rep(0, ncell(test))) # Make a blank raster filled with zeros with the same structure as the read-in raster
binary_mask <- mask(blank_rast, mask = test, # Everywhere the raster layer was masked, set it to 1 in the binary-mask raster
mask_value = test@file@nodatavalue,
updatevalue = 1)
binary_mask_preStack <- c(binary_mask_preStack, binary_mask)
}
#------------------------------------------------------
# Create indices that acquire respective rasters for a given activity season
#------------------------------------------------------
yearRound_inds <- c(1:6,11:15)
photoSeason_inds <- c(1:6,11:12,15,7:8)
precipSeason_inds <- c(1:6,11:12,15,9:10)
#------------------------------------------------------
# Compress predictors into a stacked raster for each activity season
#------------------------------------------------------
predictors_yearRound_check <- binary_mask_preStack[yearRound_inds] %>% stack()
predictors_photoSeason_check <- binary_mask_preStack[photoSeason_inds] %>% stack()
predictors_precipSeason_check <- binary_mask_preStack[precipSeason_inds] %>% stack()
#------------------------------------------------------
# Plot individual binary mask raster layers by activity season
#------------------------------------------------------
png("Environmental Predictors Sum Checks/Raster Plots/Year Round Individual Raster NA.png")
plot(predictors_yearRound_check, width=500, height=500, maxpixels=1e8)
dev.off()
png("Environmental Predictors Sum Checks/Raster Plots/Photo Season Individual Raster NA.png")
plot(predictors_photoSeason_check, width=500, height=500, maxpixels=1e8)
dev.off()
png("Environmental Predictors Sum Checks/Raster Plots/Precip Season Individual Raster NA.png")
plot(predictors_precipSeason_check, width=500, height=500, maxpixels=1e8)
dev.off()
dev.off()
dev.off()
plot(predictors_yearRound_check, width=100, height=100, maxpixels=1e8)
predictors_yearRound_check
predictors_yearRound_check$nam
predictors_yearRound_check[names]
predictors_yearRound_check[1]
predictors_yearRound_check[[1]]
predictors_yearRound_check[[,1]]
names(predictors_photoSeason_check)
names(predictors_yearRound_check)
names(predictors_yearRound_check)[1]
plot(predictors_yearRound_check[1])
plot(predictors_yearRound_check[[1]])
?plot
#------------------------------------------------------
# Plot individual binary mask raster layers by activity season
#------------------------------------------------------
for(i in 1:length(predictors_yearRound_check)) {
save_name <- paste0("Environmental Predictors Sum Checks/Year Round - Binary Rasters/",
names(predictors_yearRound_check)[i],".png")
png(save_name)
plot(predictors_yearRound_check[[i]])
dev.off()
}
for(i in 1:length(predictors_photoSeason_check)) {
save_name <- paste0("Environmental Predictors Sum Checks/Photo Season - Binary Rasters/",
names(predictors_photoSeason_check)[i],".png")
png(save_name)
plot(predictors_photoSeason_check[[i]])
dev.off()
}
for(i in 1:length(predictors_precipSeason_check)) {
save_name <- paste0("Environmental Predictors Sum Checks/Precip Season - Binary Rasters/",
names(predictors_precipSeason_check)[i],".png")
png(save_name)
plot(predictors_precipSeason_check[[i]])
dev.off()
}
dev.off()
dev.off()
#------------------------------------------------------
# Plot individual binary mask raster layers by activity season
#------------------------------------------------------
for(i in 1:length(predictors_yearRound_check)) {
save_name <- paste0("Environmental Predictors Sum Checks/Year Round - Binary Rasters/",
names(predictors_yearRound_check)[i],".png")
png(save_name)
plot(predictors_yearRound_check[[i]])
dev.off()
}
for(i in 1:length(predictors_photoSeason_check)) {
save_name <- paste0("Environmental Predictors Sum Checks/Photo Season - Binary Rasters/",
names(predictors_photoSeason_check)[i],".png")
png(save_name)
plot(predictors_photoSeason_check[[i]])
dev.off()
}
for(i in 1:length(predictors_precipSeason_check)) {
save_name <- paste0("Environmental Predictors Sum Checks/Precip Season - Binary Rasters/",
names(predictors_precipSeason_check)[i],".png")
png(save_name)
plot(predictors_precipSeason_check[[i]])
dev.off()
}
getwd()
#------------------------------------------------------
# Plot individual binary mask raster layers by activity season
#------------------------------------------------------
for(i in 1:length(predictors_yearRound_check)) {
save_name <- paste0("Environmental Predictors Sum Checks/Year Round - Binary Raster Plots/",
names(predictors_yearRound_check)[i],".png")
png(save_name)
plot(predictors_yearRound_check[[i]])
dev.off()
}
for(i in 1:length(predictors_photoSeason_check)) {
save_name <- paste0("Environmental Predictors Sum Checks/Photo Season - Binary Raster Plots/",
names(predictors_photoSeason_check)[i],".png")
png(save_name)
plot(predictors_photoSeason_check[[i]])
dev.off()
}
for(i in 1:length(predictors_precipSeason_check)) {
save_name <- paste0("Environmental Predictors Sum Checks/Precip Season - Binary Raster Plots/",
names(predictors_precipSeason_check)[i],".png")
png(save_name)
plot(predictors_precipSeason_check[[i]])
dev.off()
}
for(i in 1:length(predictors_precipSeason_check)) {
print(names(predictors_precipSeason_check)[i])
}
names(predictors_precipSeason_check)[1]
names(predictors_precipSeason_check)[2]
names(predictors_precipSeason_check)[4]
names(predictors_precipSeason_check)[8]
names(predictors_precipSeason_check)[10]
names(predictors_precipSeason_check)[12]
names(predictors_precipSeason_check)[13]
names(predictors_precipSeason_check)[12]
names(predictors_precipSeason_check)[11]
length(predictors_precipSeason_check)
nrow(predictors_photoSeason_check)
nlayers(predictors_photoSeason_check)
#------------------------------------------------------
# Plot individual binary mask raster layers by activity season
#------------------------------------------------------
for(i in 1:nlayers(predictors_yearRound_check)) {
save_name <- paste0("Environmental Predictors Sum Checks/Year Round - Binary Raster Plots/",
names(predictors_yearRound_check)[i],".png")
png(save_name)
plot(predictors_yearRound_check[[i]])
dev.off()
}
for(i in 1:nlayers(predictors_photoSeason_check)) {
save_name <- paste0("Environmental Predictors Sum Checks/Photo Season - Binary Raster Plots/",
names(predictors_photoSeason_check)[i],".png")
png(save_name)
plot(predictors_photoSeason_check[[i]])
dev.off()
}
for(i in 1:nlayers(predictors_precipSeason_check)) {
save_name <- paste0("Environmental Predictors Sum Checks/Precip Season - Binary Raster Plots/",
names(predictors_precipSeason_check)[i],".png")
png(save_name)
plot(predictors_precipSeason_check[[i]])
dev.off()
}
#######################################################
# Author: Tejas Athni
# Project: Mosquito SDM Thermal Dependence
# Description: Configuration file for all scripts
#######################################################
#------------------------------------------------------
# Load general utility and data handling libraries
#------------------------------------------------------
library(tidyverse)
library(dplyr)
library(plyr)
library(magrittr)
library(tidyr)
library(stringr)
library(readxl)
library(beepr)
library(here)
library(data.table)
#------------------------------------------------------
# Load raster, geospatial, and species distribution modeling libraries
#------------------------------------------------------
library(raster)
library(maptools)
library(dismo)
library(rJava)
library(enmSdm)
library(maxnet)
library(rgdal)
library(sf)
library(sp)
library(rgeos)
library(spThin)
library(spdep)
library(geosphere)
#------------------------------------------------------
# Load XGBoost machine learning, plotting, and visualization libraries
#------------------------------------------------------
library(xgboost)
library(ggplot2)
library(ggpubr)
library(grid)
library(gridExtra)
library(corrplot)
library(pdp)
library(pROC)
library(plotROC)
library(foreach)
library(vip)
library(rBayesianOptimization)
#------------------------------------------------------
# Load map data and set crs, memory limit, and seed
#------------------------------------------------------
data(wrld_simpl)
my_crs <- "+proj=longlat +datum=WGS84 +no_defs"
memory.limit(size=56000)
seedNum <- 250
#------------------------------------------------------
# Create dataframes for species of interest and activity seasons
#------------------------------------------------------
SpeciesOfInterest_Names <- c("Aedes aegypti",
"Aedes albopictus",
"Anopheles gambiae",
"Anopheles stephensi",
"Culex annulirostris",
"Culex pipiens",
"Culex quinquefasciatus",
"Culex tarsalis")
ActivitySeason_Type <- c("None- Year Round",
"Photoperiod",
"Precipitation",
"None- Year Round",
"None- Year Round",
"Photoperiod",
"None- Year Round",
"Photoperiod")
#------------------------------------------------------
# Define local project directory for data load-in
#------------------------------------------------------
project_dir <- "E:/SynologyDrive/Tejas_Server/! Research/! Mordecai Lab/! Mosquito SDM Thermal Dependence/"
setwd(project_dir)
#------------------------------------------------------
# Define a decimal places function for filtering by latitude/longitude reporting precision uncertainty
#------------------------------------------------------
decimalNums <- function(x) {
if ((x %% 1) != 0) {
nchar(strsplit(sub('0+$', '', as.character(format(x, scientific=FALSE, digits=20))), ".", fixed=TRUE)[[1]][[2]])
} else {
return(0)
}
}
options(scipen = 100000)
#------------------------------------------------------
## DATA LOAD-IN ##
#------------------------------------------------------
#------------------------------------------------------
# Load in occurrence data
#------------------------------------------------------
Mosquitoes_SpeciesOfInterest <- read.csv("GBIF_Datasets_Cleaned/Mosquitoes_SpeciesOfInterest.csv", header = TRUE,
encoding = "UTF-8", stringsAsFactors = FALSE)
#------------------------------------------------------
## DATA LOAD-IN ##
#------------------------------------------------------
#------------------------------------------------------
# Load in occurrence data
#------------------------------------------------------
Mosquitoes_SpeciesOfInterest <- read.csv("GBIF_Datasets_Cleaned/Mosquitoes_SpeciesOfInterest.csv", header = TRUE,
encoding = "UTF-8", stringsAsFactors = FALSE)
#------------------------------------------------------
# Load in background bias masks
#------------------------------------------------------
bias_masks <- alply(list.files("Background Bias Masks",
pattern = ".RDS",
full.names = TRUE), 1, function(file){
print(file)
df <- readRDS(file)
return(df)
}) %>%
setNames(c("An_Gambiae","An_Stephensi","Cx_Annuli","Main"))
bias_masks_index <- c(4,4,1,2,3,4,4,4)
#------------------------------------------------------
# Load in ecoregion shapefiles
#------------------------------------------------------
ecoregions <- alply(list.files("Ecoregion_Outputs/Shapefiles",
pattern = ".RDS",
full.names = TRUE), 1, function(file){
print(file)
shapefile <- readRDS(file)
return(shapefile)
}) %>%
setNames(c("Ae_Aegypti","Ae_Albopictus","An_Gambiae","An_Stephensi",
"Cx_Annuli","Cx_Pipiens","Cx_Quinque","Cx_Tarsalis"))
#------------------------------------------------------
# Load in activity season length rasters
#------------------------------------------------------
activity_lengths <- alply(list.files("Activity Season Lengths",
pattern = ".tif",
full.names = TRUE), 1, function(file){
print(file)
rast <- raster(file)
return(rast)
}) %>%
setNames(c("Photoperiod","Precipitation"))
activity_lengths_index <- c(NA,1,2,NA,NA,1,NA,1)
#------------------------------------------------------
# Load in summed environmental predictors
#------------------------------------------------------
predictor_sums <- alply(list.files("Environmental Predictors Summed",
pattern = ".tif",
full.names = TRUE), 1, function(file){
print(file)
rast <- raster(file)
return(rast)
}) %>%
setNames(c("Photoperiod","Precipitation","YearRound"))
predictor_sums_index <- c(3,1,2,3,3,1,3,1)
#------------------------------------------------------
# Load in environmental predictors and stack by activity season
#------------------------------------------------------
predictors_preStack <- alply(list.files("Environmental Predictors Merged",
pattern = ".tif",
full.names = TRUE), 1, function(file){
print(file)
rast <- raster(file)
return(rast)
})
rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","TAM","TASD","WS")
predictors_preStack <- setNames(predictors_preStack, rasterNames)
predictors_yearRound <- predictors_preStack[c(1:6,11,14,12:13)] %>% stack()
predictors_photoSeason <- predictors_preStack[c(1:6,11,14,7:8)] %>% stack()
predictors_precipSeason <- predictors_preStack[c(1:6,11,14,9:10)] %>% stack()
