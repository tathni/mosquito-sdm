SpeciesOfInterest_Names[i] == "Culex quinquefasciatus") {
predictors <- predictors_yearRound }
if(SpeciesOfInterest_Names[i] == "Aedes albopictus" |
SpeciesOfInterest_Names[i] == "Culex pipiens" |
SpeciesOfInterest_Names[i] == "Culex tarsalis") {
predictors <- predictors_photoSeason }
if(SpeciesOfInterest_Names[i] == "Anopheles gambiae") {
predictors <- predictors_precipSeason }
#------------------------------------------------------
# Select occ and random sample bg from weighted bias mask at (3x occ) multiplier
#------------------------------------------------------
print(paste0("[",SpeciesOfInterest_Names[i],"]: Selecting occ and random sampling bg from weighted bias mask "))
occ <- occ_sf_list[[i]]
bg_df <- bg_mask_list[[i]] %>%
mutate(weight = count/sum(count))
bg <- bg_df[sample(nrow(bg_df),
size = 3*nrow(occ),
replace = FALSE,
prob = bg_df$weight),]
#------------------------------------------------------
# Plot selected bg points on the ecoregion map
#------------------------------------------------------
save_name <- paste0("Thermal Breadth Check Figures/",SpeciesOfInterest_Names[[i]]," - Bg Points on Ecoregion.pdf")
pdf(save_name)
plot(ecoregions[[i]])
plot(bg, add=TRUE)
dev.off()
plot(ecoregions[[i]])
plot(st_geometry(bg), col="red", add=TRUE)
plot(st_geometry(ecoregions[[i]]))
plot(st_geometry(bg), col="red", add=TRUE)
plot(st_geometry(ecoregions[[i]]))
plot(st_geometry(bg), col="red", pch=10, add=TRUE)
save_name <- paste0("Thermal Breadth Check Figures/",SpeciesOfInterest_Names[[i]]," - Occ on Ecoregion.pdf")
pdf(save_name)
plot(st_geometry(ecoregions[[i]]))
plot(st_geometry(occ), col="blue", add=TRUE)
dev.off()
save_name <- paste0("Thermal Breadth Check Figures/",SpeciesOfInterest_Names[[i]]," - Bg on Ecoregion.pdf")
pdf(save_name)
plot(st_geometry(ecoregions[[i]]))
plot(st_geometry(bg), col="red", add=TRUE)
dev.off()
devoff()
dev.off()
dev.off()
#######################################################
# Author: Tejas Athni
# Project: Mosquito SDM Thermal Dependence
# Description: Merge all individual Google Earth Engine rasters
#######################################################
source("E:/Documents/GitHub/mosquito-sdm/0-config.R")
predictors = TRUE  # Merging environmental predictors or activity season rasters?
#------------------------------------------------------
# Merge rasters by folders housing individual GEE sub-folders
#------------------------------------------------------
tic <- Sys.time()
# Place sub-folders that contain the individual, unmerged continental rasters into the temporary folder
# If the merged rasters aren't needed in the environment, this can be switch to an a_ply
inputPredictors <- alply(list.dirs("Environmental Raster Temporary", full.names = TRUE, recursive = FALSE), 1,
function(rast_folder){
print(rast_folder)
# For every file in that folder, read in the raster
rasters <- alply(list.files(rast_folder,  full.names = TRUE), 1, function(rast_file){
print(rast_file)
raster::raster(rast_file)
})
# Name the rasters to allow do.call to be run over them
names(rasters) <- c("x", "y")
# Output should be a list with one merged raster for every directory of the raw environmental rasters
output <- do.call(raster::merge, rasters)
return(output)
})
toc <- Sys.time()
toc - tic
#------------------------------------------------------
# Processing for environmental predictor rasters
#------------------------------------------------------
if(predictors == TRUE) {
# rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","TAM","TASD","WS")
rasterNames <-c("CD","WS")
inputPredictors %<>% setNames(rasterNames)
# #------------------------------------------------------
# # Crop the temperature rasters to landmasses and remove ocean background
# #------------------------------------------------------
# inputPredictors[[7]] <- raster::mask(inputPredictors[[7]], wrld_simpl) # PhotoASTM
# inputPredictors[[8]] <- raster::mask(inputPredictors[[8]], wrld_simpl) # PhotoASTSD
# inputPredictors[[9]] <- raster::mask(inputPredictors[[9]], wrld_simpl) # PrecipASTM
# inputPredictors[[10]] <- raster::mask(inputPredictors[[10]], wrld_simpl) # PrecipASTSD
# inputPredictors[[12]] <- raster::mask(inputPredictors[[12]], wrld_simpl) # TAM
# inputPredictors[[13]] <- raster::mask(inputPredictors[[13]], wrld_simpl) # TASD
}
#------------------------------------------------------
# Processing for activity season rasters
#------------------------------------------------------
if(predictors == FALSE) {
rasterNames <- c("PhotoAS_LastDay","PhotoAS_Length","PhotoAS_StartDay","PrecipAS_LastDay","PrecipAS_Length","PrecipAS_StartDay")
inputPredictors %<>% setNames(rasterNames)
#------------------------------------------------------
# Change Africa precipitation activity season's raster extents to global
#------------------------------------------------------
inputPredictors[[4]] %<>% raster::extend(inputPredictors[[1]], value=NA)
inputPredictors[[5]] %<>% raster::extend(inputPredictors[[1]], value=NA)
inputPredictors[[6]] %<>% raster::extend(inputPredictors[[1]], value=NA)
}
#------------------------------------------------------
# Save each individual merged covariate raster as a .tif file
#------------------------------------------------------
for (i in 1:length(inputPredictors)) {
writeRaster(inputPredictors[[i]], filename = paste0("Environmental Predictors Merged/",rasterNames[i]), format = "GTiff")
}
#######################################################
# Author: Tejas Athni
# Project: Mosquito SDM Thermal Dependence
# Description: Merge all individual Google Earth Engine rasters
#######################################################
source("E:/Documents/GitHub/mosquito-sdm/0-config.R")
predictors = TRUE  # Merging environmental predictors or activity season rasters?
#------------------------------------------------------
# Merge rasters by folders housing individual GEE sub-folders
#------------------------------------------------------
tic <- Sys.time()
# Place sub-folders that contain the individual, unmerged continental rasters into the temporary folder
# If the merged rasters aren't needed in the environment, this can be switch to an a_ply
inputPredictors <- alply(list.dirs("Environmental Raster Temporary", full.names = TRUE, recursive = FALSE), 1,
function(rast_folder){
print(rast_folder)
# For every file in that folder, read in the raster
rasters <- alply(list.files(rast_folder,  full.names = TRUE), 1, function(rast_file){
print(rast_file)
raster::raster(rast_file)
})
# Name the rasters to allow do.call to be run over them
names(rasters) <- c("x", "y")
# Output should be a list with one merged raster for every directory of the raw environmental rasters
output <- do.call(raster::merge, rasters)
return(output)
})
toc <- Sys.time()
toc - tic
#------------------------------------------------------
# Processing for environmental predictor rasters
#------------------------------------------------------
if(predictors == TRUE) {
# rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","TAM","TASD","WS")
rasterNames <-c("CD","WS")
inputPredictors %<>% setNames(rasterNames)
# #------------------------------------------------------
# # Crop the temperature rasters to landmasses and remove ocean background
# #------------------------------------------------------
# inputPredictors[[7]] <- raster::mask(inputPredictors[[7]], wrld_simpl) # PhotoASTM
# inputPredictors[[8]] <- raster::mask(inputPredictors[[8]], wrld_simpl) # PhotoASTSD
# inputPredictors[[9]] <- raster::mask(inputPredictors[[9]], wrld_simpl) # PrecipASTM
# inputPredictors[[10]] <- raster::mask(inputPredictors[[10]], wrld_simpl) # PrecipASTSD
# inputPredictors[[12]] <- raster::mask(inputPredictors[[12]], wrld_simpl) # TAM
# inputPredictors[[13]] <- raster::mask(inputPredictors[[13]], wrld_simpl) # TASD
}
#------------------------------------------------------
# Processing for activity season rasters
#------------------------------------------------------
if(predictors == FALSE) {
rasterNames <- c("PhotoAS_LastDay","PhotoAS_Length","PhotoAS_StartDay","PrecipAS_LastDay","PrecipAS_Length","PrecipAS_StartDay")
inputPredictors %<>% setNames(rasterNames)
#------------------------------------------------------
# Change Africa precipitation activity season's raster extents to global
#------------------------------------------------------
inputPredictors[[4]] %<>% raster::extend(inputPredictors[[1]], value=NA)
inputPredictors[[5]] %<>% raster::extend(inputPredictors[[1]], value=NA)
inputPredictors[[6]] %<>% raster::extend(inputPredictors[[1]], value=NA)
}
#------------------------------------------------------
# Save each individual merged covariate raster as a .tif file
#------------------------------------------------------
for (i in 1:length(inputPredictors)) {
writeRaster(inputPredictors[[i]], filename = paste0("Environmental Predictors Merged/",rasterNames[i]), format = "GTiff")
}
#######################################################
# Author: Tejas Athni
# Project: Mosquito SDM Thermal Dependence
# Description: Merge all individual Google Earth Engine rasters
#######################################################
source("E:/Documents/GitHub/mosquito-sdm/0-config.R")
activity_ssn = FALSE  # Merging environmental predictors or activity season rasters?
#------------------------------------------------------
# Merge rasters by folders housing individual GEE sub-folders
#------------------------------------------------------
tic <- Sys.time()
# Place sub-folders that contain the individual, unmerged continental rasters into the temporary folder
# If the merged rasters aren't needed in the environment, this can be switch to an a_ply
inputPredictors <- alply(list.dirs("Environmental Raster Temporary", full.names = TRUE, recursive = FALSE), 1,
function(rast_folder){
print(rast_folder)
# For every file in that folder, read in the raster
rasters <- alply(list.files(rast_folder,  full.names = TRUE), 1, function(rast_file){
print(rast_file)
raster::raster(rast_file)
})
# Name the rasters to allow do.call to be run over them
names(rasters) <- c("x", "y")
# Output should be a list with one merged raster for every directory of the raw environmental rasters
output <- do.call(raster::merge, rasters)
return(output)
})
toc <- Sys.time()
toc - tic
#------------------------------------------------------
# Processing for environmental predictor rasters
#------------------------------------------------------
if(activity_ssn == FALSE) {
# rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","TAM","TASD","WS")
rasterNames <-c("EVIM","EVISD","FC")
inputPredictors %<>% setNames(rasterNames)
# #------------------------------------------------------
# # Crop the temperature rasters to landmasses and remove ocean background
# #------------------------------------------------------
# inputPredictors[[7]] <- raster::mask(inputPredictors[[7]], wrld_simpl) # PhotoASTM
# inputPredictors[[8]] <- raster::mask(inputPredictors[[8]], wrld_simpl) # PhotoASTSD
# inputPredictors[[9]] <- raster::mask(inputPredictors[[9]], wrld_simpl) # PrecipASTM
# inputPredictors[[10]] <- raster::mask(inputPredictors[[10]], wrld_simpl) # PrecipASTSD
# inputPredictors[[12]] <- raster::mask(inputPredictors[[12]], wrld_simpl) # TAM
# inputPredictors[[13]] <- raster::mask(inputPredictors[[13]], wrld_simpl) # TASD
}
#------------------------------------------------------
# Processing for activity season rasters
#------------------------------------------------------
if(activity_ssn == TRUE) {
rasterNames <- c("PhotoAS_LastDay","PhotoAS_Length","PhotoAS_StartDay","PrecipAS_LastDay","PrecipAS_Length","PrecipAS_StartDay")
inputPredictors %<>% setNames(rasterNames)
#------------------------------------------------------
# Change Africa precipitation activity season's raster extents to global
#------------------------------------------------------
inputPredictors[[4]] %<>% raster::extend(inputPredictors[[1]], value=NA)
inputPredictors[[5]] %<>% raster::extend(inputPredictors[[1]], value=NA)
inputPredictors[[6]] %<>% raster::extend(inputPredictors[[1]], value=NA)
}
#------------------------------------------------------
# Save each individual merged covariate raster as a .tif file
#------------------------------------------------------
for (i in 1:length(inputPredictors)) {
writeRaster(inputPredictors[[i]], filename = paste0("Environmental Predictors Merged/",rasterNames[i]), format = "GTiff")
}
source("E:/Documents/GitHub/mosquito-sdm/0-config.R")
#------------------------------------------------------
# Load in environmental predictors
#------------------------------------------------------
predictors_preStack <- alply(list.files("Environmental Predictors Merged",
pattern = ".tif",
full.names = TRUE), 1, function(file){
print(file)
rast <- raster(file)
return(rast)
})
rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","TAM","TASD","WS")
predictors_preStack <- setNames(predictors_preStack, rasterNames)
#------------------------------------------------------
# Compress predictors into a stacked raster for each activity season combination
#------------------------------------------------------
predictors_yearRound <- predictors_preStack[c(1:6,11,14,12:13)] %>% stack()
predictors_photoSeason <- predictors_preStack[c(1:6,11,14,7:8)] %>% stack()
predictors_precipSeason <- predictors_preStack[c(1:6,11,14,9:10)] %>% stack()
#------------------------------------------------------
# Create stacked raster sums
#------------------------------------------------------
predictor_sum_yearRound <- sum(predictors_yearRound)
predictor_sum_photoSeason <- sum(predictors_photoSeason)
predictor_sum_precipSeason <- sum(predictors_precipSeason)
#------------------------------------------------------
# Save raster sums
#------------------------------------------------------
writeRaster(predictor_sum_yearRound, filename = "Environmental Predictors Summed/Predictor_Sum_YearRound.tif", format = "GTiff", overwrite=T)
writeRaster(predictor_sum_photoSeason, filename = "Environmental Predictors Summed/Predictor_Sum_PhotoSeason.tif", format = "GTiff", overwrite=T)
writeRaster(predictor_sum_precipSeason, filename = "Environmental Predictors Summed/Predictor_Sum_PrecipSeason.tif", format = "GTiff", overwrite=T)
Mosquitoes_SpeciesOfInterest <- read.csv("GBIF_Datasets_Cleaned/Mosquitoes_SpeciesOfInterest.csv", header = TRUE,
encoding = "UTF-8", stringsAsFactors = FALSE)
set.seed(seedNum)
pairs_possibleBg <- Mosquitoes_SpeciesOfInterest %>%
dplyr::select(decimalLongitude, decimalLatitude) %>%
unique
set.seed(seedNum)
pairs_possibleBg <- pairs_possibleBg[sample(nrow(pairs_possibleBg), 15000), ] # Over-sample to account for NA's
pairs_bg <- raster::extract(predictors, pairs_possibleBg)
pairs_bg <- pairs_bg[complete.cases(pairs_bg), ]
g = 10000
set.seed(seedNum)
pairs_sample <- pairs_bg[sample(nrow(pairs_bg), g), ] # Select 10k bg points for pairs sampling
pdf("Pairs Correlation Covariates.pdf", width=9, height=8)
corrplot(cor(pairs_sample),
method = "color",
addCoef.col = "black",
tl.col = "black", tl.srt = 45,
type = "upper")
dev.off
set.seed(seedNum)
pairs_possibleBg <- Mosquitoes_SpeciesOfInterest %>%
dplyr::select(decimalLongitude, decimalLatitude) %>%
unique
set.seed(seedNum)
pairs_possibleBg <- pairs_possibleBg[sample(nrow(pairs_possibleBg), 15000), ] # Over-sample to account for NA's
pairs_bg <- raster::extract(predictors, pairs_possibleBg)
pairs_bg <- pairs_bg[complete.cases(pairs_bg), ]
g = 10000
set.seed(seedNum)
pairs_sample <- pairs_bg[sample(nrow(pairs_bg), g), ] # Select 10k bg points for pairs sampling
source("E:/Documents/GitHub/mosquito-sdm/0-config.R")
set.seed(seedNum)
pairs_possibleBg <- Mosquitoes_SpeciesOfInterest %>%
dplyr::select(decimalLongitude, decimalLatitude) %>%
unique
set.seed(seedNum)
pairs_possibleBg <- pairs_possibleBg[sample(nrow(pairs_possibleBg), 15000), ] # Over-sample to account for NA's
pairs_bg <- raster::extract(predictors, pairs_possibleBg)
pairs_bg <- pairs_bg[complete.cases(pairs_bg), ]
g = 10000
set.seed(seedNum)
pairs_sample <- pairs_bg[sample(nrow(pairs_bg), g), ] # Select 10k bg points for pairs sampling
pdf("Pairs Correlation Covariates.pdf", width=9, height=8)
corrplot(cor(pairs_sample),
method = "color",
addCoef.col = "black",
tl.col = "black", tl.srt = 45,
type = "upper")
dev.off()
set.seed(seedNum)
pairs_possibleBg <- Mosquitoes_SpeciesOfInterest %>%
dplyr::select(decimalLongitude, decimalLatitude) %>%
unique
set.seed(seedNum)
pairs_possibleBg <- pairs_possibleBg[sample(nrow(pairs_possibleBg), 15000), ]
View(pairs_possibleBg)
pairs_bg <- raster::extract(predictors, pairs_possibleBg)
library(raster)
pairs_bg <- raster::extract(predictors, pairs_possibleBg)
?raster::extract
pairs_bg <- raster::extract(predictors, pairs_possibleBg %>% st_as_sf())
occ_points <- Mosquitoes_SpeciesOfInterest %>%
filter(species == SpeciesOfInterest_Names[[i]]) %>%
dplyr::select(c(decimalLongitude, decimalLatitude))
rast <- predictors_preStack[[1]] # Choose any generic raster to acquire cells and centroids from
occ_longlat <- cellFromXY(rast, occ_points) %>% as.data.frame() %>%
setNames("cell") %>% unique() %>%
mutate(longitude = xFromCell(rast, cell),  # Acquire longitude (x) and latitude (y) from cell centroids
latitude = yFromCell(rast, cell)) %>%
dplyr::select(-cell) %>% # Cell number is now obsolete if working from (x,y) as an sf object
filter(!is.na(longitude) & !is.na(latitude)) # Remove the NA locations
occ_sf <- st_as_sf(occ_longlat, coords = c("longitude","latitude"),
crs = 4326, agr = "constant")
pairs_bg <- raster::extract(predictors, occ_sf)
pairs_bg <- pairs_bg[complete.cases(pairs_bg), ]
g = 10000
predictors
predictors <- alply(list.files("Environmental Predictors Merged",
pattern = ".tif",
full.names = TRUE), 1, function(file){
print(file)
rast <- raster(file)
return(rast)
})
rasterNames <- c("CD","EVIM","EVISD","FC","HP","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","TAM","TASD","WS")
rasterNames_spaced <- c("Cattle Density",
"Enhanced Vegetation Index - Mean",
"Enhanced Vegetation Index - Standard Deviation",
"Forest Cover %",
"Human Population",
"Precipitation of the Driest Quarter",
"Photoperiod Activity Season - Temperature Mean",
"Photoperiod Activity Season - Temperature Standard Deviation",
"Precipitation Activity Season - Temperature Mean",
"Precipitation Activity Season - Temperature Standard Deviation",
"Precipitation of the Wettest Quarter",
"Temperature Annual Mean",
"Temperature Annual Standard Deviation",
"Wind Speed")
predictors <- setNames(predictors, rasterNames)
set.seed(seedNum)
pairs_possibleBg <- Mosquitoes_SpeciesOfInterest %>%
dplyr::select(decimalLongitude, decimalLatitude) %>%
unique
set.seed(seedNum)
pairs_possibleBg <- pairs_possibleBg[sample(nrow(pairs_possibleBg), 15000), ] # Over-sample to account for NA's
pairs_bg <- raster::extract(predictors, pairs_possibleBg)
pairs_bg <- pairs_bg[complete.cases(pairs_bg), ]
g = 10000
set.seed(seedNum)
pairs_sample <- pairs_bg[sample(nrow(pairs_bg), g), ] # Select 10k bg points for pairs sampling
pdf("Pairs Correlation Covariates.pdf", width=9, height=8)
corrplot(cor(pairs_sample),
method = "color",
addCoef.col = "black",
tl.col = "black", tl.srt = 45,
type = "upper")
dev.off()
pairs_bg <- raster::extract(predictors, occ_sf)
predictors
predictors$WS
predictors %<>% stack()
pairs_bg <- raster::extract(predictors, occ_sf)
pairs_possibleBg <- occ_sf[sample(nrow(occ_sf), 10000), ]
pairs_possibleBg <- occ_sf[1:10000,]
pairs_bg <- raster::extract(predictors, occ_sf)
pdf("Pairs Correlation Covariates.pdf", width=9, height=8)
corrplot(cor(pairs_bg),
method = "color",
addCoef.col = "black",
tl.col = "black", tl.srt = 45,
type = "upper")
dev.off()
occ_points <- Mosquitoes_SpeciesOfInterest %>%
#filter(species == SpeciesOfInterest_Names[[i]]) %>%
dplyr::select(c(decimalLongitude, decimalLatitude))
rast <- predictors_preStack[[1]] # Choose any generic raster to acquire cells and centroids from
occ_longlat <- cellFromXY(rast, occ_points) %>% as.data.frame() %>%
setNames("cell") %>% unique() %>%
mutate(longitude = xFromCell(rast, cell),  # Acquire longitude (x) and latitude (y) from cell centroids
latitude = yFromCell(rast, cell)) %>%
dplyr::select(-cell) %>% # Cell number is now obsolete if working from (x,y) as an sf object
filter(!is.na(longitude) & !is.na(latitude)) # Remove the NA locations
occ_sf <- st_as_sf(occ_longlat, coords = c("longitude","latitude"),
crs = 4326, agr = "constant")
pairs_sample <- occ_sf[sample(nrow(occ_sf),
size = 10000,
replace = FALSE),] # Select 10k bg points for pairs sampling
pdf("Pairs Correlation Covariates.pdf", width=9, height=8)
corrplot(cor(pairs_sample),
method = "color",
addCoef.col = "black",
tl.col = "black", tl.srt = 45,
type = "upper")
dev.off()
pairs_sample <- occ_sf[sample(nrow(occ_sf),
size = 10000,
replace = FALSE),] # Select 10k bg points for pairs sampling
pairs_bg <- raster::extract(predictors, pairs_sample)
pdf("Pairs Correlation Covariates.pdf", width=9, height=8)
corrplot(cor(pairs_bg),
method = "color",
addCoef.col = "black",
tl.col = "black", tl.srt = 45,
type = "upper")
dev.off()
pairs_bg
pairs_bg2 <- pairs_bg %>% na.omit()
pdf("Pairs Correlation Covariates.pdf", width=9, height=8)
corrplot(cor(pairs_bg),
method = "color",
addCoef.col = "black",
tl.col = "black", tl.srt = 45,
type = "upper")
dev.off()
dev.off()
dev.off()
pdf("Pairs Correlation Covariates.pdf", width=9, height=8)
corrplot(cor(pairs_bg),
method = "color",
addCoef.col = "black",
tl.col = "black", tl.srt = 45,
type = "upper")
dev.off()
corrplot(cor(pairs_bg),
method = "color",
addCoef.col = "black",
tl.col = "black", tl.srt = 45,
type = "upper")
pairs_bg
unique(pairs_bg)
pdf("Pairs Correlation Covariates.pdf", width=9, height=8)
corrplot(cor(pairs_bg2),
method = "color",
addCoef.col = "black",
tl.col = "black", tl.srt = 45,
type = "upper")
dev.off()
corrplot(cor(pairs_bg2),
method = "color",
addCoef.col = "black",
tl.col = "black", tl.srt = 45,
type = "upper")
#######################################################
# Author: Tejas Athni
# Project: Mosquito SDM Thermal Dependence
# Description: Sum the stack of environmental covariates by activity season
#######################################################
source("E:/Documents/GitHub/mosquito-sdm/0-config.R")
#------------------------------------------------------
# Load in environmental predictors
#------------------------------------------------------
predictors_preStack <- alply(list.files("Environmental Predictors Merged",
pattern = ".tif",
full.names = TRUE), 1, function(file){
print(file)
rast <- raster(file)
return(rast)
})
rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","TAM","TASD","WS")
predictors_preStack <- setNames(predictors_preStack, rasterNames)
#------------------------------------------------------
# Compress predictors into a stacked raster for each activity season combination
#------------------------------------------------------
predictors_yearRound <- predictors_preStack[c(1:6,11,14,12:13)] %>% stack()
predictors_photoSeason <- predictors_preStack[c(1:6,11,14,7:8)] %>% stack()
predictors_precipSeason <- predictors_preStack[c(1:6,11,14,9:10)] %>% stack()
#------------------------------------------------------
# Create stacked raster sums
#------------------------------------------------------
predictor_sum_yearRound <- sum(predictors_yearRound)
predictor_sum_photoSeason <- sum(predictors_photoSeason)
predictor_sum_precipSeason <- sum(predictors_precipSeason)
#------------------------------------------------------
# Save raster sums
#------------------------------------------------------
writeRaster(predictor_sum_yearRound, filename = "Environmental Predictors Summed/Predictor_Sum_YearRound.tif", format = "GTiff", overwrite=T)
writeRaster(predictor_sum_photoSeason, filename = "Environmental Predictors Summed/Predictor_Sum_PhotoSeason.tif", format = "GTiff", overwrite=T)
writeRaster(predictor_sum_precipSeason, filename = "Environmental Predictors Summed/Predictor_Sum_PrecipSeason.tif", format = "GTiff", overwrite=T)
