}
}
Mosquitoes_ALA <- Mosquitoes_ALA[!Mosquitoes_ALA$rowNum %in% indexRows, ] %>%
dplyr::select(-rowNum) %>%
dplyr::select(c(1:6))
annuli_ala_coord_decplace <- Mosquitoes_ALA
Mosquitoes_ALA %<>% mutate(source = "Atlas of Living Australia")
#------------------------------------------------------
##  MERGING AND EXPORT ##
#------------------------------------------------------
#------------------------------------------------------
# Combine the ALA, Sinka, and Wiebe datasets with species of interest
#------------------------------------------------------
Mosquitoes_SpeciesOfInterest <- rbind(Mosquitoes_SpeciesOfInterest, Mosquitoes_ALA, Mosquitoes_Sinka,
Mosquitoes_Wiebe)
#------------------------------------------------------
# Write CSV file containing cleaned dataset for use in modeling
#------------------------------------------------------
write.csv(Mosquitoes_SpeciesOfInterest, file = "GBIF_Datasets_Cleaned/Mosquitoes_SpeciesOfInterest.csv", row.names = F)
#------------------------------------------------------
## FILTER STATISTICS ##
#------------------------------------------------------
#------------------------------------------------------
# Aedes aegypti
#------------------------------------------------------
filterStats_pre[[1]][[1]] <- "Aedes aegypti"
filterStats_pre[[2]][[1]] <- nrow(soi_raw %>% filter(species == "Aedes aegypti"))
filterStats_pre[[3]][[1]] <- nrow(soi_nonfossil_bor %>% filter(species == "Aedes aegypti"))
filterStats_pre[[4]][[1]] <- nrow(soi_nonunknown_bor %>% filter(species == "Aedes aegypti"))
filterStats_pre[[5]][[1]] <- nrow(soi_yearrange %>% filter(species == "Aedes aegypti"))
filterStats_pre[[6]][[1]] <- nrow(soi_coord_reported %>% filter(species == "Aedes aegypti"))
filterStats_pre[[7]][[1]] <- nrow(soi_coord_decplace %>% filter(species == "Aedes aegypti"))
#------------------------------------------------------
# Aedes albopictus
#------------------------------------------------------
filterStats_pre[[1]][[2]] <- "Aedes albopictus"
filterStats_pre[[2]][[2]] <- nrow(soi_raw %>% filter(species == "Aedes albopictus"))
filterStats_pre[[3]][[2]] <- nrow(soi_nonfossil_bor %>% filter(species == "Aedes albopictus"))
filterStats_pre[[4]][[2]] <- nrow(soi_nonunknown_bor %>% filter(species == "Aedes albopictus"))
filterStats_pre[[5]][[2]] <- nrow(soi_yearrange %>% filter(species == "Aedes albopictus"))
filterStats_pre[[6]][[2]] <- nrow(soi_coord_reported %>% filter(species == "Aedes albopictus"))
filterStats_pre[[7]][[2]] <- nrow(soi_coord_decplace %>% filter(species == "Aedes albopictus"))
#------------------------------------------------------
# Anopheles gambiae
#------------------------------------------------------
filterStats_pre[[1]][[3]] <- "Anopheles gambiae"
filterStats_pre[[2]][[3]] <- nrow(soi_raw %>% filter(species == "Anopheles gambiae")) + nrow(wiebe_raw)
filterStats_pre[[3]][[3]] <- nrow(soi_nonfossil_bor %>% filter(species == "Anopheles gambiae")) + nrow(wiebe_raw)
filterStats_pre[[4]][[3]] <- nrow(soi_nonunknown_bor %>% filter(species == "Anopheles gambiae")) + nrow(wiebe_raw)
filterStats_pre[[5]][[3]] <- nrow(soi_yearrange %>% filter(species == "Anopheles gambiae")) + nrow(wiebe_yearrange)
filterStats_pre[[6]][[3]] <- nrow(soi_coord_reported %>% filter(species == "Anopheles gambiae")) + nrow(wiebe_yearrange)
filterStats_pre[[7]][[3]] <- nrow(soi_coord_decplace %>% filter(species == "Anopheles gambiae")) + nrow(wiebe_coord_decplace)
#------------------------------------------------------
# Anopheles stephensi
#------------------------------------------------------
filterStats_pre[[1]][[4]] <- "Anopheles stephensi"
filterStats_pre[[2]][[4]] <- nrow(soi_raw %>% filter(species == "Anopheles stephensi")) + nrow(sinka_raw)
filterStats_pre[[3]][[4]] <- nrow(soi_nonfossil_bor %>% filter(species == "Anopheles stephensi")) + nrow(sinka_nonfossil_bor)
filterStats_pre[[4]][[4]] <- nrow(soi_nonunknown_bor %>% filter(species == "Anopheles stephensi")) + nrow(sinka_nonunknown_bor)
filterStats_pre[[5]][[4]] <- nrow(soi_yearrange %>% filter(species == "Anopheles stephensi")) + nrow(sinka_yearrange)
filterStats_pre[[6]][[4]] <- nrow(soi_coord_reported %>% filter(species == "Anopheles stephensi")) + nrow(sinka_coord_reported)
filterStats_pre[[7]][[4]] <- nrow(soi_coord_decplace %>% filter(species == "Anopheles stephensi")) + nrow(sinka_coord_decplace)
#------------------------------------------------------
# Culex annulirostris
#------------------------------------------------------
filterStats_pre[[1]][[5]] <- "Culex annulirostris"
filterStats_pre[[2]][[5]] <- nrow(soi_raw %>% filter(species == "Culex annulirostris")) + nrow(annuli_ala_raw)
filterStats_pre[[3]][[5]] <- nrow(soi_nonfossil_bor %>% filter(species == "Culex annulirostris")) + nrow(annuli_ala_nonfossil_bor)
filterStats_pre[[4]][[5]] <- nrow(soi_nonunknown_bor %>% filter(species == "Culex annulirostris")) + nrow(annuli_ala_nonunknown_bor)
filterStats_pre[[5]][[5]] <- nrow(soi_yearrange %>% filter(species == "Culex annulirostris")) + nrow(annuli_ala_yearrange)
filterStats_pre[[6]][[5]] <- nrow(soi_coord_reported %>% filter(species == "Culex annulirostris")) + nrow(annuli_ala_coord_reported)
filterStats_pre[[7]][[5]] <- nrow(soi_coord_decplace %>% filter(species == "Culex annulirostris")) + nrow(annuli_ala_coord_decplace)
#------------------------------------------------------
# Culex pipiens
#------------------------------------------------------
filterStats_pre[[1]][[6]] <- "Culex pipiens"
filterStats_pre[[2]][[6]] <- nrow(soi_raw %>% filter(species == "Culex pipiens"))
filterStats_pre[[3]][[6]] <- nrow(soi_nonfossil_bor %>% filter(species == "Culex pipiens"))
filterStats_pre[[4]][[6]] <- nrow(soi_nonunknown_bor %>% filter(species == "Culex pipiens"))
filterStats_pre[[5]][[6]] <- nrow(soi_yearrange %>% filter(species == "Culex pipiens"))
filterStats_pre[[6]][[6]] <- nrow(soi_coord_reported %>% filter(species == "Culex pipiens"))
filterStats_pre[[7]][[6]] <- nrow(soi_coord_decplace %>% filter(species == "Culex pipiens"))
#------------------------------------------------------
# Culex quinquefasciatus
#------------------------------------------------------
filterStats_pre[[1]][[7]] <- "Culex quinquefasciatus"
filterStats_pre[[2]][[7]] <- nrow(soi_raw %>% filter(species == "Culex quinquefasciatus"))
filterStats_pre[[3]][[7]] <- nrow(soi_nonfossil_bor %>% filter(species == "Culex quinquefasciatus"))
filterStats_pre[[4]][[7]] <- nrow(soi_nonunknown_bor %>% filter(species == "Culex quinquefasciatus"))
filterStats_pre[[5]][[7]] <- nrow(soi_yearrange %>% filter(species == "Culex quinquefasciatus"))
filterStats_pre[[6]][[7]] <- nrow(soi_coord_reported %>% filter(species == "Culex quinquefasciatus"))
filterStats_pre[[7]][[7]] <- nrow(soi_coord_decplace %>% filter(species == "Culex quinquefasciatus"))
#------------------------------------------------------
# Culex tarsalis
#------------------------------------------------------
filterStats_pre[[1]][[8]] <- "Culex tarsalis"
filterStats_pre[[2]][[8]] <- nrow(soi_raw %>% filter(species == "Culex tarsalis"))
filterStats_pre[[3]][[8]] <- nrow(soi_nonfossil_bor %>% filter(species == "Culex tarsalis"))
filterStats_pre[[4]][[8]] <- nrow(soi_nonunknown_bor %>% filter(species == "Culex tarsalis"))
filterStats_pre[[5]][[8]] <- nrow(soi_yearrange %>% filter(species == "Culex tarsalis"))
filterStats_pre[[6]][[8]] <- nrow(soi_coord_reported %>% filter(species == "Culex tarsalis"))
filterStats_pre[[7]][[8]] <- nrow(soi_coord_decplace %>% filter(species == "Culex tarsalis"))
#------------------------------------------------------
# Save the data file
#------------------------------------------------------
saveRDS(filterStats_pre, "filterStats_pre.RDS")
View(filterStats_pre)
#######################################################
# Author: Tejas Athni
# Project: Mosquito SDM Thermal Dependence
# Description: Create ecoregion-based sampling range maps
#######################################################
testing = FALSE # For testing purposes, set testing = TRUE, which will allow things to run faster while debugging
if(Sys.getenv('SLURM_JOB_ID') != ""){ # Check if the script is running on Sherlock remote computing cluster
library(dplyr)
library(magrittr)
library(tidyr)
library(geosphere)
library(sf)
library(sp)
library(rgeos)
library(maptools)
data(wrld_simpl)
# Use the command line arguments supplied to set which species we'll be running
args <- commandArgs(TRUE)
species_inds <- as.numeric(args[1])
} else {
source("E:/Documents/GitHub/mosquito-sdm/0-config.R")
species_inds <- 1:8
}
#------------------------------------------------------
# Load in lists and ecoregions
#------------------------------------------------------
tic <- Sys.time()
speciesList <- c("AedesAegypti",
"AedesAlbopictus",
"AnophelesGambiae",
"AnophelesStephensi",
"CulexAnnulirostris",
"CulexPipiens",
"CulexQuinquefasciatus",
"CulexTarsalis")
SpeciesOfInterest_Names <- c("Aedes aegypti",
"Aedes albopictus",
"Anopheles gambiae",
"Anopheles stephensi",
"Culex annulirostris",
"Culex pipiens",
"Culex quinquefasciatus",
"Culex tarsalis")
ecoregions <- read_sf(dsn = "./RESOLVE_Ecoregions/Ecoregions2017", layer = "Ecoregions2017")
my_crs <- "+proj=longlat +datum=WGS84 +no_defs"
Mosquitoes_SpeciesOfInterest <- read.csv("GBIF_Datasets_Cleaned/Mosquitoes_SpeciesOfInterest.csv", header = TRUE,
encoding = "UTF-8", stringsAsFactors = FALSE)
toc <- Sys.time()
print("Loaded in lists and ecoregions")
print(toc - tic)
#------------------------------------------------------
# Create continent-specific shapefiles from wrld_simpl
#------------------------------------------------------
SouthAmerica_list <- c("Colombia", "Venezuela", "Suriname", "Guyana", "French Guiana",
"Ecuador", "Peru", "Bolivia", "Chile", "Argentina", "Uruguay",
"Paraguay", "Brazil", "Falkland Islands (Malvinas)")
SouthAmerica <- wrld_simpl[wrld_simpl$NAME %in% SouthAmerica_list, ]
NorthAmerica <- wrld_simpl[wrld_simpl$REGION==19,]
NorthAmerica <- NorthAmerica[!NorthAmerica$NAME %in% c(SouthAmerica_list,"Greenland"), ]
Greenland <- wrld_simpl[wrld_simpl$NAME=="Greenland",]
Africa <- wrld_simpl[wrld_simpl$REGION==2,]
Oceania <- wrld_simpl[wrld_simpl$REGION==9,]
Europe <- wrld_simpl[wrld_simpl$REGION==150,]
Asia <- wrld_simpl[wrld_simpl$REGION==142,]
Antarctica <- wrld_simpl[wrld_simpl$REGION==0,]
#------------------------------------------------------
# Split up the 'Rock and Ice' ecoregion by continent, and append these back into ecoregions
#------------------------------------------------------
tic <- Sys.time()
sf::sf_use_s2(FALSE)
Antarctica_rockice <- st_intersection(ecoregions %>% filter(ECO_NAME == "Rock and Ice"),
st_as_sf(Antarctica) %>% st_set_crs(my_crs)) %>%
dplyr::select(c(1:15,27))
NorthAmerica_rockice <- st_intersection(ecoregions %>% filter(ECO_NAME == "Rock and Ice"),
st_as_sf(NorthAmerica) %>% st_set_crs(my_crs)) %>%
dplyr::select(c(1:15,27))
Greenland_rockice <- st_intersection(ecoregions %>% filter(ECO_NAME == "Rock and Ice"),
st_as_sf(Greenland) %>% st_set_crs(my_crs)) %>%
dplyr::select(c(1:15,27))
Asia_rockice <- st_intersection(ecoregions %>% filter(ECO_NAME == "Rock and Ice"),
st_as_sf(Asia) %>% st_set_crs(my_crs)) %>%
dplyr::select(c(1:15,27))
ecoregions %<>% filter(!ECO_NAME == "Rock and Ice")
ecoregions %<>% rbind(Antarctica_rockice, NorthAmerica_rockice, Asia_rockice)
toc <- Sys.time()
print("Split up the 'Rock and Ice' ecoregion by continent")
print(toc - tic)
#------------------------------------------------------
# Tidy and validate the sf geometry of ecoregions
#------------------------------------------------------
tic <- Sys.time()
ecoregions_check <- ecoregions %>% st_is_valid()
ecoregions_sf <- ecoregions %>% st_make_valid()
toc <- Sys.time()
print("Tidied and validated sf geometry of ecoregions")
print(toc - tic)
#------------------------------------------------------
# Define a function to buffer points with 200 km radius
#------------------------------------------------------
geosphere_buffer <- function(sf_points,
buffer_deg = 0:360, # Degrees around the circle from which to acquire points
dist # Distance in meters
){
buff_ll <- destPoint(st_coordinates(sf_points), # Acquire pairs of points in a circle
b = rep(buffer_deg, each = nrow(sf_points)),
d = dist) %>%
as.data.frame() %>%
st_as_sf(coords=c("lon","lat"), remove = FALSE) %>%
dplyr::mutate(order = 1:n(),
id = order %% nrow(sf_points))
# Split the buffered shapefiles if they cross longitude +/- 180 (i.e., edges of the map)
buff_ll %<>%
group_by(id) %>%
mutate(world_edge_x = sign(lon) != sign(lag(lon))) %>%
replace_na(list(world_edge_x = FALSE)) %>%
mutate(id = id + 0.1*(cumsum(world_edge_x) %% 2)) %>% # If on opposite side of map, treat these point pairs as new ID
dplyr::select(-lat, -lon, -world_edge_x) %>%
ungroup()
# Create polygon buffer
buff_polys = st_sf(
aggregate(
buff_ll$geometry,
list(buff_ll$id),
function(g){
st_cast(st_combine(g),"POLYGON")
}
))
return(buff_polys)
}
#------------------------------------------------------
# Run loop through each species
#------------------------------------------------------
for(i in species_inds) {
#------------------------------------------------------
# Acquire occurrence points
#------------------------------------------------------
thisSpecies <- filter(Mosquitoes_SpeciesOfInterest, species == SpeciesOfInterest_Names[i])
paste0("The species of interest is: ", SpeciesOfInterest_Names[i])
occGPS <- dplyr::select(thisSpecies, c(decimalLongitude, decimalLatitude))
occGPS_sf <- st_as_sf(occGPS, coords = c("decimalLongitude", "decimalLatitude"),
crs = 4326, agr = "constant")
#------------------------------------------------------
# Call function to buffer occurrence points with 200 km
#------------------------------------------------------
if(testing == TRUE){
occGPS_sf <- occGPS_sf[1:100,]
}
tic <- Sys.time()
occGPS_buffered <- geosphere_buffer(occGPS_sf, dist = 200000)
st_crs(occGPS_buffered) <- "+proj=longlat +datum=WGS84 +no_defs"
toc <- Sys.time()
print(paste0("Buffered the occurrence points for ",SpeciesOfInterest_Names[i]))
print(toc - tic)
#------------------------------------------------------
# Create a dataframe with start and end indices to loop through rows of buffered points
# Splits up intersecting into smaller component tasks to save computation time
#------------------------------------------------------
ecoregion_inds <- list()
occ_by <- 1000
# Second column, lead by 1, and remove the last row
indices <- data.frame(start_index = c(seq(from=1, to=nrow(occGPS_buffered), by=occ_by), nrow(occGPS_buffered)+1)) %>%
mutate(end_index = lead(start_index) - 1) %>%
na.omit()
#------------------------------------------------------
# Piece-wise intersecting all ecoregions with buffered points and acquire indices
#------------------------------------------------------
tic <- Sys.time()
for(k in 1:nrow(indices)) {
ecoregions_temp <- st_intersects(ecoregions_sf, occGPS_buffered[indices[k,1]:indices[k,2],])
ecoregion_inds <- c(ecoregion_inds,
purrr::map_dbl(ecoregions_temp, function(x) length(x)) %>%
magrittr::is_greater_than(0) %>%
which())
}
ecoregion_intersected_inds <- ecoregion_inds %>% Reduce("c", .) %>% unique
toc <- Sys.time()
print(paste0("Intersected ecoregions with buffered points and acquired indices for ",SpeciesOfInterest_Names[i]))
print(toc - tic)
#------------------------------------------------------
# Save indices
#------------------------------------------------------
tic <- Sys.time()
saveRDS(ecoregion_intersected_inds, paste0("Ecoregion_Outputs/Indices_",speciesList[i],".RDS"))
toc <- Sys.time()
print(paste0("Saved indices for ",SpeciesOfInterest_Names[i]))
print(toc - tic)
#------------------------------------------------------
# Select and union the intersected ecoregions
#------------------------------------------------------
tic <- Sys.time()
ecoregion_cut <- ecoregions_sf[ecoregion_intersected_inds, ] %>% st_make_valid() %>%
as_Spatial %>% gBuffer(byid = FALSE, width = 0) %>% st_as_sf
toc <- Sys.time()
print(paste0("Selected and unioned the intersected ecoregions for ",SpeciesOfInterest_Names[i]))
print(toc - tic)
#------------------------------------------------------
# Save ecoregion shapefiles and buffered points
#------------------------------------------------------
tic <- Sys.time()
saveRDS(ecoregion_intersected_inds, paste0("Ecoregion_Outputs/Indices_",speciesList[i],".RDS"))
saveRDS(ecoregion_cut, paste0("Ecoregion_Outputs/Shapefile_",speciesList[i],".RDS"))
saveRDS(occGPS_sf, paste0("Ecoregion_Outputs/BufferedPoints_",speciesList[i],".RDS"))
toc <- Sys.time()
print(paste0("Saved ecoregion shapefiles and buffered points for ",SpeciesOfInterest_Names[i]))
print(toc - tic)
#------------------------------------------------------
# Save ecoregion maps, with and without points plotted
#------------------------------------------------------
tic <- Sys.time()
png(paste0("Ecoregion_Outputs/Ecoregions_",speciesList[i],".png"), width=1000, height=1000)
plot(st_geometry(ecoregion_cut))
dev.off()
png(paste0("Ecoregion_Outputs/Ecoregions_",speciesList[i],"_Dots.png"), width=1000, height=1000)
plot(st_geometry(ecoregion_cut))
plot(st_geometry(occGPS_sf), col="red", add=T)
dev.off()
png(paste0("Ecoregion_Outputs/Ecoregions_",speciesList[i],"_Buffered.png"), width=1000, height=1000)
plot(st_geometry(ecoregion_cut))
plot(st_geometry(occGPS_buffered), col="red", add=T)
dev.off()
toc <- Sys.time()
print(paste0("Saved ecoregion maps for ",SpeciesOfInterest_Names[i]))
print(toc - tic)
}
getwd()
rm(list=ls())
?write.csv
source("E:/Documents/GitHub/mosquito-sdm/0-config.R")
bias_mask_main <- readRDS("Background Bias Masks/Background_Mask_Main.RDS")
bias_mask_main <- readRDS("Background Bias Masks/Background_Mask_Main.RDS")
bias_mask_an_gambiae <- readRDS("Background Bias Masks/Background_Mask_An_Gambiae.RDS")
bias_mask_an_stephensi <- readRDS("Background Bias Masks/Background_Mask_An_Stephensi.RDS")
bias_mask_cx_annuli <- readRDS("Background Bias Masks/Background_Mask_Cx_Annuli.RDS")
View(bias_mask_main)
?reclassify()
source("E:/Documents/GitHub/mosquito-sdm/0-config.R")
?reclassify
predictors_preStack <- alply(list.files("Environmental Predictors Merged",
pattern = ".tif",
full.names = TRUE), 1, function(file){
print(file)
rast <- raster(file)
return(rast)
})
#------------------------------------------------------
# Name the environmental covariates in the list
#------------------------------------------------------
rasterNames <- c("ELEV","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","TAM","TASD")
inputPredictors %<>% setNames(rasterNames)
#------------------------------------------------------
# Merge rasters by folders housing individual GEE sub-folders
#------------------------------------------------------
tic <- Sys.time()
# Place sub-folders of individual, unmerged continental rasters in the temporary folder
# If the merged rasters aren't needed in the environment, this can be switch to an a_ply
inputPredictors <- alply(list.dirs("Environmental Raster Temporary", full.names = TRUE, recursive = FALSE), 1,
function(rast_folder){
print(rast_folder)
# For every file in that folder, read in the raster
rasters <- alply(list.files(rast_folder,  full.names = TRUE), 1, function(rast_file){
print(rast_file)
raster::raster(rast_file)
})
# Name the rasters to allow do.call to be run over them
names(rasters) <- c("x", "y")
# Output should be a list with one merged raster for every directory of the raw environmental rasters
output <- do.call(raster::merge, rasters)
return(output)
})
toc <- Sys.time()
toc - tic
#------------------------------------------------------
# Name the environmental covariates in the list
#------------------------------------------------------
rasterNames <- c("ELEV","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","TAM","TASD")
inputPredictors %<>% setNames(rasterNames)
#------------------------------------------------------
# Load in environmental predictors
#------------------------------------------------------
predictors_preStack <- alply(list.files("Environmental Predictors Merged",
pattern = ".tif",
full.names = TRUE), 1, function(file){
print(file)
rast <- raster(file)
return(rast)
})
rasterNames <- c("ELEV","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","TAM","TASD")
predictors_preStack <- setNames(predictors_preStack, rasterNames)
#------------------------------------------------------
# Compress predictors into a stacked raster for each activity season combination
#------------------------------------------------------
predictors_yearRound <- predictors_preStack[c(1:6,11:13)] %>% stack()
predictors_photoSeason <- predictors_preStack[c(1:8,11)] %>% stack()
predictors_precipSeason <- predictors_preStack[c(1:6,9:11)] %>% stack()
source("E:/Documents/GitHub/mosquito-sdm/0-config.R")
#------------------------------------------------------
# Load in environmental predictors
#------------------------------------------------------
predictors_preStack <- alply(list.files("Environmental Predictors Merged",
pattern = ".tif",
full.names = TRUE), 1, function(file){
print(file)
rast <- raster(file)
return(rast)
})
rasterNames <- c("ELEV","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","TAM","TASD")
predictors_preStack <- setNames(predictors_preStack, rasterNames)
#------------------------------------------------------
# Compress predictors into a stacked raster for each activity season combination
#------------------------------------------------------
predictors_yearRound <- predictors_preStack[c(1:6,11:13)] %>% stack()
predictors_photoSeason <- predictors_preStack[c(1:8,11)] %>% stack()
predictors_precipSeason <- predictors_preStack[c(1:6,9:11)] %>% stack()
predictors_yearRound[[1]]
predictors_yearRound[[5]]
predictors_yearRound[[6]]
length(predictors_yearRound)
Reduce(`+`, lapply(predictors_yearRound, nlayers))
sum(sapply(predictors_yearRound, nlayers))
predictors_yearRound
predictors_photoSeason
predictors_precipSeason
#------------------------------------------------------
# Load in environmental predictors
#------------------------------------------------------
predictors_preStack <- alply(list.files("Environmental Predictors Merged",
pattern = ".tif",
full.names = TRUE), 1, function(file){
print(file)
rast <- raster(file)
return(rast)
})
rasterNames <- c("ELEV","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","TAM","TASD")
predictors_preStack <- setNames(predictors_preStack, rasterNames)
#------------------------------------------------------
# Compress predictors into a stacked raster for each activity season combination
#------------------------------------------------------
predictors_yearRound <- predictors_preStack[c(1:6,11:13)] %>% stack()
predictors_photoSeason <- predictors_preStack[c(1:6,11,7:8)] %>% stack()
predictors_precipSeason <- predictors_preStack[c(1:6,11,9:10)] %>% stack()
predictors_yearRound
predictors_photoSeason
predictors_precipSeason
incrementer[[1]][[is.na(incrementer[[1]])]]
incrementer <- c(1,10,100,1000,10000,100000,1000000,10000000,100000000)
incrementer <- c(1,10,100,1000,10000,100000,1000000,10000000,100000000)
incrementer[[1]][[is.na(incrementer[[1]])]]
incrementer <- c(c(1,10,100,1000,10000,100000,1000000,10000000,100000000),
c(NA,NA,NA,NA))
incrementer[[1]][[is.na(incrementer[[1]])]]
incrementer
incrementer[[1]]
incrementer[1]
i <- 1L
predictors_yearRound[[i]][is.na(predictors_yearRound[[i]])]
incrementer[1]
incrementer[[1]]
incrementer[i]
source("E:/Documents/GitHub/mosquito-sdm/0-config.R")
#------------------------------------------------------
# Load in environmental predictors
#------------------------------------------------------
predictors_preStack <- alply(list.files("Environmental Predictors Merged",
pattern = ".tif",
full.names = TRUE), 1, function(file){
print(file)
rast <- raster(file)
return(rast)
})
rasterNames <- c("ELEV","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","TAM","TASD")
predictors_preStack <- setNames(predictors_preStack, rasterNames)
#------------------------------------------------------
# Compress predictors into a stacked raster for each activity season combination
#------------------------------------------------------
predictors_yearRound <- predictors_preStack[c(1:6,11:13)] %>% stack()
predictors_photoSeason <- predictors_preStack[c(1:6,11,7:8)] %>% stack()
predictors_precipSeason <- predictors_preStack[c(1:6,11,9:10)] %>% stack()
#------------------------------------------------------
# Check which layers have most NAs by assigning each layer's NA an increasing stairstep value, 0 otherwise
#------------------------------------------------------
incrementer <- c(c(1,10,100,1000,10000,100000,1000000,10000000,100000000),
c(NA,NA,NA,NA))
predictors_yearRound_check <- predictors_yearRound
predictors_photoSeason_check <- predictors_photoSeason
predictors_precipSeason_check <- predictors_precipSeason
for(i in 1:9) {
predictors_yearRound_check[[i]][is.na(predictors_yearRound_check[[i]])] <- incrementer[i]
predictors_yearRound_check[[i]][!is.na(predictors_yearRound_check[[i]])] <- 0
predictors_photoSeason_check[[i]][is.na(predictors_photoSeason_check[[i]])] <- incrementer[i]
predictors_photoSeason_check[[i]][!is.na(predictors_photoSeason_check[[i]])] <- 0
predictors_precipSeason_check[[i]][is.na(predictors_precipSeason_check[[i]])] <- incrementer[i]
predictors_precipSeason_check[[i]][!is.na(predictors_precipSeason_check[[i]])] <- 0
}
#------------------------------------------------------
# Sum the raster check stacks
#------------------------------------------------------
predictor_sum_yearRound_check <- sum(predictors_yearRound_check)
predictor_sum_photoSeason_check <- sum(predictors_photoSeason_check)
predictor_sum_precipSeason_check <- sum(predictors_precipSeason_check)
#------------------------------------------------------
# Save raster check sums
#------------------------------------------------------
writeRaster(predictor_sum_yearRound_check, filename = "Environmental Predictors Summed/Predictor_Sum_YearRound_Check.tif", format = "GTiff", overwrite=T)
writeRaster(predictor_sum_photoSeason_check, filename = "Environmental Predictors Summed/Predictor_Sum_PhotoSeason_Check.tif", format = "GTiff", overwrite=T)
writeRaster(predictor_sum_precipSeason_check, filename = "Environmental Predictors Summed/Predictor_Sum_PrecipSeason_Check.tif", format = "GTiff", overwrite=T)
