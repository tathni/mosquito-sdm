predictor_sums_index <- c(3,1,2,3,3,1,3,1)
#------------------------------------------------------
# Load in environmental predictors and stack by activity season
#------------------------------------------------------
predictors_preStack <- alply(list.files("Environmental Predictors Merged",
pattern = ".tif",
full.names = TRUE), 1, function(file){
print(file)
rast <- raster(file)
return(rast)
})
rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","TAM","TASD","WS")
predictors_preStack <- setNames(predictors_preStack, rasterNames)
predictors_yearRound <- predictors_preStack[c(1:6,11,14,12:13)] %>% stack()
predictors_photoSeason <- predictors_preStack[c(1:6,11,14,7:8)] %>% stack()
predictors_precipSeason <- predictors_preStack[c(1:6,11,14,9:10)] %>% stack()
#######################################################
# Author: Tejas Athni
# Project: Mosquito SDM Thermal Dependence
# Description: Merge all individual Google Earth Engine rasters
#######################################################
source("E:/Documents/GitHub/mosquito-sdm/0-config.R")
activity_ssn_metadata = FALSE  # Merging environmental predictors or activity season metadata rasters?
#------------------------------------------------------
# Merge rasters by folders housing individual GEE sub-folders
#------------------------------------------------------
tic <- Sys.time()
# Place sub-folders that contain the individual, unmerged continental rasters into the temporary folder
# If the merged rasters aren't needed in the environment, this can be switch to an a_ply
inputPredictors <- alply(list.dirs("Environmental Raster Data", full.names = TRUE, recursive = FALSE), 1,
function(rast_folder){
print(rast_folder)
# For every file in that folder, read in the raster
rasters <- alply(list.files(rast_folder,  full.names = TRUE), 1, function(rast_file){
print(rast_file)
raster::raster(rast_file)
})
# Name the rasters to allow do.call to be run over them
names(rasters) <- c("x", "y")
# Output should be a list with one merged raster for every directory of the raw environmental rasters
output <- do.call(raster::merge, rasters)
return(output)
})
toc <- Sys.time()
toc - tic
#------------------------------------------------------
# Processing for environmental predictor rasters
#------------------------------------------------------
if(activity_ssn_metadata == FALSE) {
rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","SW","TAM","TASD","WS")
inputPredictors %<>% setNames(rasterNames)
#------------------------------------------------------
# For cattle density, change Greenland and other unsuitable locations' values from NA to 0
#------------------------------------------------------
inputPredictors[[1]][is.na(inputPredictors[[1]])] <- 0
#------------------------------------------------------
# Mask cattle density and temperature rasters to landmass-only, using a complete raster known to be cut to continents
#------------------------------------------------------
inputPredictors[[1]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[7]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[8]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[9]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[10]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[13]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[14]] %<>% raster::mask(inputPredictors[[6]])
}
#------------------------------------------------------
# Processing for activity season metadata rasters
#------------------------------------------------------
if(activity_ssn_metadata == TRUE) {
rasterNames <- c("PhotoAS_LastDay","PhotoAS_Length","PhotoAS_StartDay","PrecipAS_LastDay","PrecipAS_Length","PrecipAS_StartDay")
inputPredictors %<>% setNames(rasterNames)
#------------------------------------------------------
# Change extent of Africa's precipitation activity season metadata rasters to global
#------------------------------------------------------
inputPredictors[[4]] %<>% raster::extend(inputPredictors[[1]], value=NA)
inputPredictors[[5]] %<>% raster::extend(inputPredictors[[1]], value=NA)
inputPredictors[[6]] %<>% raster::extend(inputPredictors[[1]], value=NA)
}
#------------------------------------------------------
# Save each individual merged covariate raster as a .tif file
#------------------------------------------------------
for (i in 1:length(inputPredictors)) {
writeRaster(inputPredictors[[i]], filename = paste0("Environmental Predictors Merged/",rasterNames[i]),
format = "GTiff", overwrite = TRUE)
}
inputPredictors <- alply(list.dirs("Environmental Predictors Merged", full.names=T), 1, function(rast_file) {
print(rast_file)
raster::raster(rast_file)
}
)
inputPredictors <- alply(list.dirs("Environmental Predictors Merged/", full.names=T), 1, function(rast_file) {
print(rast_file)
raster::raster(rast_file)
})
inputPredictors <- alply(list.dirs("Environmental Predictors Merged", full.names=T, recursive=F), 1, function(rast_file) {
print(rast_file)
raster::raster(rast_file)
})
inputPredictors <- alply(list.dirs("Environmental Predictors Merged", full.names=T, recursive=F), function(rast_file) {
print(rast_file)
raster::raster(rast_file)
})
rastlist <- list.files(path = "Environmental Predictors Merged/", pattern='.TIF$', all.files=TRUE, full.names=FALSE)
inputPredictors <- lapply(rastlist, raster)
getwd()
rastlist <- list.files(path = "Environmental Predictors Merged", pattern='.TIF$', all.files=TRUE, full.names=FALSE)
rastlist <- list.files(path = "Environmental Predictors Merged", pattern='.tif$', all.files=TRUE, full.names=FALSE)
inputPredictors <- lapply(rastlist, raster)
newList <- <- purrr::map_chr(rastlist, ~ paste0("Environmental Predictors Merged/", .))
newList <- purrr::map_chr(rastlist, ~ paste0("Environmental Predictors Merged/", .))
inputPredictors <- lapply(rastlist, raster)
newList
getwd()
install.packages('rgdal')
rgdal::?raster
?raster
require(rgdal)
library(rgdal)
inputPredictors <- lapply(newList, raster)
View(inputPredictors)
inputPredictors[[1]]
inputPredictors <- 0
rasterList <- purrr::map_chr(list.files(path = "Environmental Predictors Merged", pattern='.tif$', all.files=TRUE, full.names=FALSE),
~ paste0("Environmental Predictors Merged/", .))
inputPredictors <- lapply(newList, raster)
#------------------------------------------------------
# Processing for environmental predictor rasters
#------------------------------------------------------
if(activity_ssn_metadata == FALSE) {
rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","SW","TAM","TASD","WS")
inputPredictors %<>% setNames(rasterNames)
#------------------------------------------------------
# For cattle density, change Greenland and other unsuitable locations' values from NA to 0
#------------------------------------------------------
inputPredictors[[1]][is.na(inputPredictors[[1]])] <- 0
#------------------------------------------------------
# Mask cattle density and temperature rasters to landmass-only, using a complete raster known to be cut to continents
#------------------------------------------------------
inputPredictors[[1]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[7]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[8]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[9]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[10]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[13]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[14]] %<>% raster::mask(inputPredictors[[6]])
}
#------------------------------------------------------
# Processing for activity season metadata rasters
#------------------------------------------------------
if(activity_ssn_metadata == TRUE) {
rasterNames <- c("PhotoAS_LastDay","PhotoAS_Length","PhotoAS_StartDay","PrecipAS_LastDay","PrecipAS_Length","PrecipAS_StartDay")
inputPredictors %<>% setNames(rasterNames)
#------------------------------------------------------
# Change extent of Africa's precipitation activity season metadata rasters to global
#------------------------------------------------------
inputPredictors[[4]] %<>% raster::extend(inputPredictors[[1]], value=NA)
inputPredictors[[5]] %<>% raster::extend(inputPredictors[[1]], value=NA)
inputPredictors[[6]] %<>% raster::extend(inputPredictors[[1]], value=NA)
}
#------------------------------------------------------
# Save each individual merged covariate raster as a .tif file
#------------------------------------------------------
for (i in 1:length(inputPredictors)) {
writeRaster(inputPredictors[[i]], filename = paste0("Environmental Predictors Merged/",rasterNames[i]),
format = "GTiff", overwrite = TRUE)
}
memory.limit
memory.limit()
rm(list=ls())
source("E:/Documents/GitHub/mosquito-sdm/0-config.R")
activity_ssn_metadata = FALSE  # Merging environmental predictors or activity season metadata rasters?
#------------------------------------------------------
# Load in the merged rasters for testing and debugging
#------------------------------------------------------
rasterList <- purrr::map_chr(list.files(path = "Environmental Predictors Merged", pattern='.tif$', all.files=TRUE, full.names=FALSE),
~ paste0("Environmental Predictors Merged/", .))
inputPredictors <- lapply(newList, raster)
#------------------------------------------------------
# Load in the merged rasters for testing and debugging
#------------------------------------------------------
rasterList <- purrr::map_chr(list.files(path = "Environmental Predictors Merged", pattern='.tif$', all.files=TRUE, full.names=FALSE),
~ paste0("Environmental Predictors Merged/", .))
inputPredictors <- lapply(rasterList, raster)
#------------------------------------------------------
# Merge rasters by folders housing individual GEE sub-folders
#------------------------------------------------------
tic <- Sys.time()
# Place sub-folders that contain the individual, unmerged continental rasters into the temporary folder
# If the merged rasters aren't needed in the environment, this can be switch to an a_ply
inputPredictors <- alply(list.dirs("Environmental Raster Temporary", full.names = TRUE, recursive = FALSE), 1,
function(rast_folder){
print(rast_folder)
# For every file in that folder, read in the raster
rasters <- alply(list.files(rast_folder,  full.names = TRUE), 1, function(rast_file){
print(rast_file)
raster::raster(rast_file)
})
# Name the rasters to allow do.call to be run over them
names(rasters) <- c("x", "y")
# Output should be a list with one merged raster for every directory of the raw environmental rasters
output <- do.call(raster::merge, rasters)
return(output)
})
toc <- Sys.time()
toc - tic
#------------------------------------------------------
# Save each individual merged covariate raster as a .tif file
#------------------------------------------------------
for (i in 1:length(inputPredictors)) {
writeRaster(inputPredictors[[i]], filename = paste0("Environmental Predictors Merged/",rasterNames[i]),
format = "GTiff", overwrite = TRUE)
}
inputPredictors %<>% setNames("CD")
inputPredictors[[1]]
inputPredictors[[1]] %<>% setNames("CD")
inputPredictors[[1]]
rasterNames <- c("CD")
#------------------------------------------------------
# Save each individual merged covariate raster as a .tif file
#------------------------------------------------------
for (i in 1:length(inputPredictors)) {
writeRaster(inputPredictors[[i]], filename = paste0("Environmental Predictors Merged/",rasterNames[i]),
format = "GTiff", overwrite = TRUE)
}
#------------------------------------------------------
# Load in the merged rasters for testing and debugging
#------------------------------------------------------
rasterList <- purrr::map_chr(list.files(path = "Environmental Predictors Merged", pattern='.tif$', all.files=TRUE, full.names=FALSE),
~ paste0("Environmental Predictors Merged/", .))
inputPredictors <- lapply(rasterList, raster)
#------------------------------------------------------
# Processing for environmental predictor rasters
#------------------------------------------------------
if(activity_ssn_metadata == FALSE) {
rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","SW","TAM","TASD","WS")
inputPredictors %<>% setNames(rasterNames)
# #------------------------------------------------------
# # For cattle density, change Greenland and other unsuitable locations' values from NA to 0
# #------------------------------------------------------
# inputPredictors[[1]][is.na(inputPredictors[[1]])] <- 0
#------------------------------------------------------
# Mask cattle density and temperature rasters to landmass-only, using a complete raster known to be cut to continents
#------------------------------------------------------
inputPredictors[[1]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[7]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[8]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[9]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[10]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[13]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[14]] %<>% raster::mask(inputPredictors[[6]])
}
plot(inputPredictors[[7]])
#------------------------------------------------------
# Save each individual merged covariate raster as a .tif file
#------------------------------------------------------
for (i in 1:length(inputPredictors)) {
writeRaster(inputPredictors[[i]], filename = paste0("Environmental Predictors Merged/",rasterNames[i]),
format = "GTiff", overwrite = TRUE)
}
traceback()
rasterNames
length(rasterNames)
plot(inputPredictors[[1]])
paste0("Environmental Predictors Merged/",rasterNames[i])
plot(inputPredictors[[2]])
View(inputPredictors)
plot(inputPredictors)
plot(inputPredictors[[3]])
plot(inputPredictors[[4]])
plot(inputPredictors[[5]])
plot(inputPredictors[[6]])
plot(inputPredictors[[7]])
plot(inputPredictors[[8]])
plot(inputPredictors[[9]])
plot(inputPredictors[[12]])
plot(inputPredictors[[13]])
plot(inputPredictors[[14]])
plot(inputPredictors[[15]])
plot(inputPredictors[[10]])
plot(inputPredictors[[11]])
rasterNames[[2]] <- NA
rasterNames <- rasterNames[[-2]]
rasterNames <- rasterNames[rasterNames != "EVIM"]
rasterNames
rasterNames <- rasterNames[!is.na(rasterNames)]
inputPredictors <- inputPredictors[-2]
inputPredictors
#------------------------------------------------------
# Save each individual merged covariate raster as a .tif file
#------------------------------------------------------
for (i in 1:length(inputPredictors)) {
writeRaster(inputPredictors[[i]], filename = paste0("Environmental Predictors Merged/",rasterNames[i]),
format = "GTiff", overwrite = TRUE)
}
traceback()
source("E:/Documents/GitHub/mosquito-sdm/0-config.R")
activity_ssn_metadata = FALSE  # Merging environmental predictors or activity season metadata rasters?
#------------------------------------------------------
# Merge rasters by folders housing individual GEE sub-folders
#------------------------------------------------------
tic <- Sys.time()
# Place sub-folders that contain the individual, unmerged continental rasters into the temporary folder
# If the merged rasters aren't needed in the environment, this can be switch to an a_ply
inputPredictors <- alply(list.dirs("Environmental Raster Temporary", full.names = TRUE, recursive = FALSE), 1,
function(rast_folder){
print(rast_folder)
# For every file in that folder, read in the raster
rasters <- alply(list.files(rast_folder,  full.names = TRUE), 1, function(rast_file){
print(rast_file)
raster::raster(rast_file)
})
# Name the rasters to allow do.call to be run over them
names(rasters) <- c("x", "y")
# Output should be a list with one merged raster for every directory of the raw environmental rasters
output <- do.call(raster::merge, rasters)
return(output)
})
toc <- Sys.time()
toc - tic
#------------------------------------------------------
# Save each individual merged covariate raster as a .tif file
#------------------------------------------------------
for (i in 1:length(inputPredictors)) {
writeRaster(inputPredictors[[i]], filename = paste0("Environmental Predictors Merged/",rasterNames[i],".tif"))
}
rasterNames <- c("EVIM","EVISD")
inputPredictors %<>% setNames(rasterNames)
#------------------------------------------------------
# Save each individual merged covariate raster as a .tif file
#------------------------------------------------------
for (i in 1:length(inputPredictors)) {
writeRaster(inputPredictors[[i]], filename = paste0("Environmental Predictors Merged/",rasterNames[i],".tif"))
}
#------------------------------------------------------
# Load in the merged rasters for testing and debugging
#------------------------------------------------------
rasterList <- purrr::map_chr(list.files(path = "Environmental Predictors Merged", pattern='.tif$', all.files=TRUE, full.names=FALSE),
~ paste0("Environmental Predictors Merged/", .))
inputPredictors <- lapply(rasterList, raster)
#------------------------------------------------------
# Load in the merged rasters for testing and debugging
#------------------------------------------------------
rasterList <- purrr::map_chr(list.files(path = "Environmental Predictors Merged", pattern='.tif$', all.files=TRUE, full.names=FALSE),
~ paste0("Environmental Predictors Merged/", .))
inputPredictors <- lapply(rasterList, raster)
names(inputPredictors)
inputPredictors
rasterNames <- c("PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","TAM","TASD")
#rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","SW","TAM","TASD","WS")
inputPredictors %<>% setNames(rasterNames)
inputPredictors
#------------------------------------------------------
# Processing for environmental predictor rasters
#------------------------------------------------------
if(activity_ssn_metadata == FALSE) {
rasterNames <- c("PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","TAM","TASD")
#rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","SW","TAM","TASD","WS")
inputPredictors %<>% setNames(rasterNames)
# #------------------------------------------------------
# # For cattle density, change Greenland and other unsuitable locations' values from NA to 0
# #------------------------------------------------------
# inputPredictors[[1]][is.na(inputPredictors[[1]])] <- 0
#------------------------------------------------------
# Mask cattle density and temperature rasters to landmass-only, using a complete raster known to be cut to continents
#------------------------------------------------------
#inputPredictors[[1]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[2]] %<>% raster::mask(inputPredictors[[1]])
inputPredictors[[3]] %<>% raster::mask(inputPredictors[[1]])
inputPredictors[[4]] %<>% raster::mask(inputPredictors[[1]])
inputPredictors[[5]] %<>% raster::mask(inputPredictors[[1]])
inputPredictors[[6]] %<>% raster::mask(inputPredictors[[1]])
inputPredictors[[7]] %<>% raster::mask(inputPredictors[[1]])
}
#------------------------------------------------------
# Load in the merged rasters for testing and debugging
#------------------------------------------------------
rasterList <- purrr::map_chr(list.files(path = "Environmental Predictors Merged", pattern='.tif$', all.files=TRUE, full.names=FALSE),
~ paste0("Environmental Predictors Merged/", .))
inputPredictors <- lapply(rasterList, raster)
rasterNames <- c("PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","TAM","TASD")
#rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","SW","TAM","TASD","WS")
inputPredictors %<>% setNames(rasterNames)
#------------------------------------------------------
# Processing for environmental predictor rasters
#------------------------------------------------------
if(activity_ssn_metadata == FALSE) {
rasterNames <- c("PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","TAM","TASD")
#rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","SW","TAM","TASD","WS")
inputPredictors %<>% setNames(rasterNames)
# #------------------------------------------------------
# # For cattle density, change Greenland and other unsuitable locations' values from NA to 0
# #------------------------------------------------------
# inputPredictors[[1]][is.na(inputPredictors[[1]])] <- 0
#------------------------------------------------------
# Mask cattle density and temperature rasters to landmass-only, using a complete raster known to be cut to continents
#------------------------------------------------------
#inputPredictors[[1]] %<>% raster::mask(inputPredictors[[6]])
inputPredictors[[2]] %<>% raster::mask(inputPredictors[[1]])
inputPredictors[[3]] %<>% raster::mask(inputPredictors[[1]])
inputPredictors[[4]] %<>% raster::mask(inputPredictors[[1]])
inputPredictors[[5]] %<>% raster::mask(inputPredictors[[1]])
inputPredictors[[6]] %<>% raster::mask(inputPredictors[[1]])
inputPredictors[[7]] %<>% raster::mask(inputPredictors[[1]])
}
plot(inputPredictors)
plot(inputPredictors[[1]])
plot(inputPredictors[[2]])
#------------------------------------------------------
# Save each individual merged covariate raster as a .tif file
#------------------------------------------------------
for (i in 1:length(inputPredictors)) {
writeRaster(inputPredictors[[i]], filename = paste0("Environmental Predictors Merged/",rasterNames[i],"_new.tif"))
}
?mask
#------------------------------------------------------
# Load in the merged rasters for testing and debugging
#------------------------------------------------------
rasterList <- purrr::map_chr(list.files(path = "Environmental Predictors Merged", pattern='.tif$', all.files=TRUE, full.names=FALSE),
~ paste0("Environmental Predictors Merged/", .))
inputPredictors <- lapply(rasterList, raster)
rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","SW","TAM","TASD","WS")
inputPredictors %<>% setNames(rasterNames)
#------------------------------------------------------
# For cattle density, change Greenland and other unsuitable locations' values from NA to 0
#------------------------------------------------------
inputPredictors[[1]] %<>% raster::mask(inputPredictors[[6]], inverse=TRUE, updatevalue=0)
plot(inputPredictors[[1]])
?mask
pdq_greenland_mask <- raster("Environmental Raster Miscellaneous/PDQ_Greenland_Mask.tif")
greenland_mask <- raster("Environmental Raster Miscellaneous/PDQ_Greenland_Mask.tif")
greenland_mask %<>% raster::extend(inputPredictors[[6]], value=NA)
plot(greenland_mask)
inputPredictors[[1]] %<>% raster::mask(greenland_mask, inverse=TRUE, updatevalue=0)
plot(inputPredictors[[1]])
#------------------------------------------------------
# Load in the merged rasters for testing and debugging
#------------------------------------------------------
rasterList <- purrr::map_chr(list.files(path = "Environmental Predictors Merged", pattern='.tif$', all.files=TRUE, full.names=FALSE),
~ paste0("Environmental Predictors Merged/", .))
inputPredictors <- lapply(rasterList, raster)
rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","SW","TAM","TASD","WS")
inputPredictors %<>% setNames(rasterNames)
#------------------------------------------------------
# For cattle density, change Greenland's values from NA to 0
#------------------------------------------------------
greenland_mask <- raster("Environmental Raster Miscellaneous/PDQ_Greenland_Mask.tif")
greenland_mask %<>% raster::extend(inputPredictors[[6]], value=NA)
inputPredictors[[1]] %<>% raster::mask(greenland_mask, inverse=TRUE, updatevalue=0)
plot(inputPredictors[[1]])
test <- raster::stack(inputPredictors[[1]], greenland_mask)
plot(greenland_mask)
?mask
#------------------------------------------------------
# Load in the merged rasters for testing and debugging
#------------------------------------------------------
rasterList <- purrr::map_chr(list.files(path = "Environmental Predictors Merged", pattern='.tif$', all.files=TRUE, full.names=FALSE),
~ paste0("Environmental Predictors Merged/", .))
inputPredictors <- lapply(rasterList, raster)
rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","SW","TAM","TASD","WS")
inputPredictors %<>% setNames(rasterNames)
inputPredictors[[1]] %<>% raster::merge(greenland_mask, inverse=TRUE, updatevalue=0)
plot(inputPredictors[[1]])
#------------------------------------------------------
# Load in the merged rasters for testing and debugging
#------------------------------------------------------
rasterList <- purrr::map_chr(list.files(path = "Environmental Predictors Merged", pattern='.tif$', all.files=TRUE, full.names=FALSE),
~ paste0("Environmental Predictors Merged/", .))
inputPredictors <- lapply(rasterList, raster)
rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","SW","TAM","TASD","WS")
inputPredictors %<>% setNames(rasterNames)
inputPredictors[[1]] %<>% raster::cover(greenland_mask)
#------------------------------------------------------
# Load in the merged rasters for testing and debugging
#------------------------------------------------------
rasterList <- purrr::map_chr(list.files(path = "Environmental Predictors Merged", pattern='.tif$', all.files=TRUE, full.names=FALSE),
~ paste0("Environmental Predictors Merged/", .))
inputPredictors <- lapply(rasterList, raster)
rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","SW","TAM","TASD","WS")
inputPredictors %<>% setNames(rasterNames)
inputPredictors[[1]] %<>% raster::merge(greenland_mask)
inputPredictors[[1]] %<>% raster::mask(greenland_mask, inverse=TRUE, updatevalue=0)
plot(inputPredictors[[1]])
writeRaster(inputPredictors[[1]], filename = "Environmental Predictors Merged/CD_new.tif")
inputPredictors[[4]] %<>% raster::extend(inputPredictors[[1]], value=NA)
inputPredictors[[1]] %<>% raster::mask(greenland_mask, inverse=TRUE, updatevalue=0)
#------------------------------------------------------
# Load in the merged rasters for testing and debugging
#------------------------------------------------------
rasterList <- purrr::map_chr(list.files(path = "Environmental Predictors Merged", pattern='.tif$', all.files=TRUE, full.names=FALSE),
~ paste0("Environmental Predictors Merged/", .))
inputPredictors <- lapply(rasterList, raster)
rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","SW","TAM","TASD","WS")
inputPredictors %<>% setNames(rasterNames)
inputPredictors[[1]] %<>% raster::merge(greenland_mask)
inputPredictors[[1]] %<>% raster::mask(greenland_mask, inverse=TRUE, updatevalue=0)
writeRaster(inputPredictors[[1]], filename = "Environmental Predictors Merged/CD_new.tif")
plot(inputPredictors[[1]])
test2 <- raster("Environmental Predictors Merged/CD_new.tif")
plot(test2)
#------------------------------------------------------
# Load in environmental predictors
#------------------------------------------------------
predictors_preStack <- alply(list.files("Environmental Predictors Merged",
pattern = ".tif",
full.names = TRUE), 1, function(file){
print(file)
rast <- raster(file)
return(rast)
})
rasterNames <- c("CD","EVIM","EVISD","FC","HPD","PDQ","PhotoASTM","PhotoASTSD","PrecipASTM","PrecipASTSD","PWQ","SW","TAM","TASD","WS")
predictors_preStack <- setNames(predictors_preStack, rasterNames)
